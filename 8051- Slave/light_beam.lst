C51 COMPILER V9.52.0.0   LIGHT_BEAM                                                        04/25/2019 17:37:33 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LIGHT_BEAM
OBJECT MODULE PLACED IN light_beam.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\light_beam.c LARGE OPTIMIZE(0,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -light_beam.lst) TABS(2) OBJECT(light_beam.obj)

line level    source

   1          #include "light_beam.h"
   2          
   3          //port de sortie
   4          sbit PWN_pin = P1^2;
   5          sbit FLASH_pin = P1^0;
   6          
   7          volatile int servo_angle_V = 0;
   8          
   9          int duree_flash = 10;
  10          int duree_no_flash = 10;
  11          byte nbr_flash = 10;
  12          byte pwn_duty = 10;
  13          
  14          int prescaler_counter = -1;
  15          LIGHT_STATE light = LIGHT_ON;
  16          LIGHT_GENERATOR light_genrator_state = STOP;
  17          
  18          
  19          /*
  20          #############################################################################
  21                  Interrupt Routine For Timer 0
  22          #############################################################################
  23          */
  24          
  25          
  26          void timer_0_int() interrupt 1
  27          { 
  28   1        static int nbr_interrupt = 0;
  29   1        static char high = 0;
  30   1        
  31   1        int duree_imp = 0;
  32   1        int reload_value = 0;
  33   1        
  34   1        duree_imp = 13 * servo_angle_V + 2768;// (cf excel table 3)
  35   1        
  36   1        //duree_imp = 13*(servo_angle_V+90) + 1800 ;// 900us pour 90°  (cf doc technique)
  37   1        
  38   1        //duree_imp = SERVO_PWN_ANGLE_COEF *(servo_angle_V+90) + 2000 ;// 1ms pour -90°  (cf doc technique)
  39   1      
  40   1        PWN_pin = !PWN_pin;
  41   1        
  42   1        if (high == 1)
  43   1        {
  44   2          reload_value = 0xFFFF - (36666 - duree_imp );
  45   2          high=0;
  46   2        } else {
  47   2          
  48   2          reload_value = 0xFFFF - duree_imp;
  49   2          high=1;
  50   2        }
  51   1        TL0= reload_value;
  52   1        TH0= reload_value >> 8; //on décale pour obtenir les bits de poids fort
  53   1        
  54   1        
C51 COMPILER V9.52.0.0   LIGHT_BEAM                                                        04/25/2019 17:37:33 PAGE 2   

  55   1        if(nbr_interrupt >= 500)
  56   1        {
  57   2          ET0 = 0;  // Diseable timer0 interuption
  58   2          PWN_pin = 0;
  59   2          high = 0;
  60   2          nbr_interrupt = 0;
  61   2        }
  62   1        else
  63   1        {
  64   2          nbr_interrupt++;
  65   2        }
  66   1      }
  67          
  68          /*
  69          #############################################################################
  70                  End of Interrupt Routine For Timer 0
  71          #############################################################################
  72          */
  73          
  74          /*
  75          #############################################################################
  76                  Interrupt Routine For Timer 1
  77          #############################################################################
  78          */
  79          
  80          void timer_1_int() interrupt 3
  81          { 
  82   1        static char high = 1;
  83   1        
  84   1        int reload_value = 0;
  85   1        
  86   1        if (high == 1)
  87   1        {
  88   2          reload_value = 0xFFFF - (LIGHT_PWN_PERIOD - pwn_duty * LIGHT_PWN_DUTY_1 );
  89   2          FLASH_pin = 0;
  90   2          high=0;
  91   2        }
  92   1        else
  93   1        {
  94   2          reload_value = 0xFFFF - pwn_duty * LIGHT_PWN_DUTY_1;
  95   2          prescaler_counter++;
  96   2          ( FLASH_pin = (light == LIGHT_ON) ? 1 : 0);
  97   2          high=1;
  98   2        }
  99   1        
 100   1        
 101   1        TL1= reload_value;
 102   1        TH1= reload_value >> 8; //on décale pour obtenir les bits de poids fort
 103   1        
 104   1        light_beam_flash_sequence();
 105   1        
 106   1        if(light_genrator_state == FINISH)
 107   1        {
 108   2          ET1 = 0;
 109   2          high = 0;
 110   2        }
 111   1      }
 112          
 113          void light_beam_flash_sequence()
 114          {
 115   1        static byte nbr_seq = 0;
 116   1      
C51 COMPILER V9.52.0.0   LIGHT_BEAM                                                        04/25/2019 17:37:33 PAGE 3   

 117   1        if(light_genrator_state == FINISH)
 118   1        {
 119   2          nbr_seq = 0;
 120   2        }
 121   1        
 122   1        if(light == LIGHT_ON)
 123   1        {
 124   2          if(prescaler_counter >= 10 * duree_flash)
 125   2          {
 126   3            prescaler_counter = 0;
 127   3            light = LIGHT_OFF;
 128   3          }
 129   2        }
 130   1        else
 131   1        {
 132   2          if(prescaler_counter >= 10 * duree_no_flash)
 133   2          {
 134   3            light = LIGHT_ON;
 135   3            prescaler_counter = 0;
 136   3            nbr_seq++;
 137   3            if(nbr_seq >= nbr_flash)
 138   3            {
 139   4              nbr_seq = 0;
 140   4              light_genrator_state = FINISH;
 141   4            }
 142   3          }
 143   2        }
 144   1        
 145   1      }
 146          /*
 147          #############################################################################
 148                  End of Interrupt Routine For Timer 1
 149          #############################################################################
 150          */
 151          
 152          /*
 153          #############################################################################
 154                  Peripheric initialize
 155          #############################################################################
 156          */
 157          
 158          
 159          void Init_light_beam()
 160          {
 161   1        
 162   1        // Push-Pull mode for P0.0 and P0.1
 163   1        P1MDOUT |= 0x0F;
 164   1        PWN_pin = 0;
 165   1        FLASH_pin = 0;
 166   1        
 167   1        lb_init_timer0();
 168   1        
 169   1        lb_init_timer1();
 170   1        
 171   1        ET0 = 0;  // Diseable timer0 interuption
 172   1        ET1 = 0;  // Diseable timer1 interuption
 173   1      
 174   1      }
 175          
 176          
 177          void lb_init_timer0()
 178          { 
C51 COMPILER V9.52.0.0   LIGHT_BEAM                                                        04/25/2019 17:37:33 PAGE 4   

 179   1        //Reglages Timer 0 (a SYSCLK/12 selon CKCON, soit un incrément tous les 0.545us)
 180   1        TMOD |=0x01; //mode 1
 181   1        TCON |= 0x11; // Enable Timer0 (bit4) and enable interupt on edge (bit0)
 182   1        TL0=0xA8;
 183   1        TH0=0xFB;
 184   1        
 185   1      }
 186          
 187          void lb_init_timer1()
 188          { 
 189   1        int init_reload_value = 0;
 190   1        
 191   1        //Reglages Timer 0 (a SYSCLK/12 selon CKCON, soit un incrément tous les 0.545us)
 192   1        TMOD |= 0x10; // Timer 1 Mode 1
 193   1        TCON |= 0x44; // Enable Timer1 (bit6) and enable interupt on edge (bit2)
 194   1        
 195   1        init_reload_value = 0xFFFF - pwn_duty * LIGHT_PWN_DUTY_1;
 196   1        
 197   1        TL1= init_reload_value;
 198   1        TH1= init_reload_value >> 8;
 199   1        
 200   1      }
 201          
 202          
 203          /*
 204          #############################################################################
 205                  Light Beam Emetter Core
 206          #############################################################################
 207          */
 208          
 209          void light_beam_process(OUT_M2 * cmd)
 210          {
 211   1        
 212   1        
 213   1        if(cmd->Etat_Servo == Servo_oui)
 214   1        {
 215   2          light_beam_move(cmd);
 216   2        }
 217   1        
 218   1        if(cmd->Etat_Lumiere == Allumer)
 219   1        {
 220   2          switch(light_genrator_state)
 221   2          {
 222   3            case STOP:
 223   3              light_beam_switch_ON(cmd);
 224   3              break;
 225   3            case FINISH:
 226   3              cmd->Etat_Lumiere = Lumiere_non;
 227   3              light_genrator_state = STOP;
 228   3              break;
 229   3            default:
 230   3              break;    
 231   3          } 
 232   2        }
 233   1        else if(cmd->Etat_Lumiere == Eteindre)
 234   1        {
 235   2          // TODO
 236   2          light_genrator_state = FINISH;
 237   2          light_beam_switch_OFF(cmd);
 238   2        }
 239   1        
 240   1      }
C51 COMPILER V9.52.0.0   LIGHT_BEAM                                                        04/25/2019 17:37:33 PAGE 5   

 241          
 242          void light_beam_move(OUT_M2 * cmd)
 243          {
 244   1        // Set angle
 245   1        lb_set_angle(cmd->Servo_Angle);
 246   1        
 247   1        // Re-launch PWN
 248   1        //pwn_over = 0;
 249   1        ET0 = 1;
 250   1        
 251   1        // Clear CMD Flag
 252   1        cmd->Etat_Servo = Servo_non;
 253   1        
 254   1        LED = 1;
 255   1        
 256   1      }
 257          
 258          void light_beam_switch_ON(OUT_M2 * cmd)
 259          {
 260   1        pwn_duty = cmd->Lumiere_Intensite;
 261   1        duree_flash = cmd->Lumiere_Duree;
 262   1        duree_no_flash = cmd->Lumire_Extinction;
 263   1        nbr_flash = cmd->Lumiere_Nbre;
 264   1        
 265   1        light_genrator_state = GENERATE;
 266   1        
 267   1        FLASH_pin = 1;
 268   1        
 269   1        // Re-launch PWN
 270   1        ET1 = 1;
 271   1        
 272   1        LED = 1;
 273   1      
 274   1      }
 275          
 276          void light_beam_switch_OFF(OUT_M2 * cmd)
 277          {
 278   1        FLASH_pin = 0;
 279   1        
 280   1        ET1 = 0;
 281   1        
 282   1        LED = 0;
 283   1      }
*** WARNING C280 IN LINE 276 OF src\light_beam.c: 'cmd': unreferenced local variable
 284          
 285          
 286          
 287          
 288          void lb_set_angle(int angle)
 289          {
 290   1        servo_angle_V = angle;
 291   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1169    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     39    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.52.0.0   LIGHT_BEAM                                                        04/25/2019 17:37:33 PAGE 6   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)

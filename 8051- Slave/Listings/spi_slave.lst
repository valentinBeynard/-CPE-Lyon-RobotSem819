C51 COMPILER V9.55   SPI_SLAVE                                                             05/14/2019 09:24:45 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE SPI_SLAVE
OBJECT MODULE PLACED IN .\Objects\spi_slave.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\spi_slave.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(
                    -.\Listings\spi_slave.lst) TABS(2) OBJECT(.\Objects\spi_slave.obj)

line level    source

   1          //------------------------------------------------------------------------------------
   2          // master.c
   3          //------------------------------------------------------------------------------------
   4          // DATE: 20/03/2019
   5          //
   6          // Target: C8051F02x
   7          // Tool chain: KEIL Microvision 4
   8          //
   9          //------------------------------------------------------------------------------------
  10          #include "spi_slave.h"
  11          #include "c8051F020.h"
  12          
  13          #include <stdlib.h>
  14          #include <string.h>
  15          
  16          
  17          byte spi_data_in[TRAM_SIZE];
  18          byte spi_data_in_ptr = 0;
  19          
  20          byte spi_data_out[TRAM_SIZE] = {'A', 'L','I','D','V'};
  21          byte spi_data_out_ptr = 0;
  22          
  23          byte spi_data_ready = 0;
  24          
  25          /*
  26          #############################################################################
  27                  Interrupt Routine
  28          #############################################################################
  29          */
  30          
  31          //On remet à zero le bit d'interruption qui est mis a 1 a chaque fin de transfert de donnees
  32          void spi_int() interrupt 6
  33          {
  34   1        byte _delay = 0;
  35   1        
  36   1        // Reset Transmission Flag
  37   1        SPIF = 0;
  38   1        
  39   1        // Read data from MASTER
  40   1        spi_data_in[spi_data_in_ptr] = SPI0DAT;
  41   1        
  42   1        // Wait at least 2 CLK before update SPIODAT
  43   1        for(_delay = 0 ; _delay < 5 ; _delay++);
  44   1        
  45   1        // Prepare Register with new Data
  46   1        SPI0DAT = spi_data_out[spi_data_out_ptr];
  47   1        
  48   1        spi_data_in_ptr++;
  49   1        spi_data_out_ptr++;
  50   1        
  51   1        // When all Tram is read
  52   1        if(spi_data_in_ptr == TRAM_SIZE)
  53   1        {
  54   2          spi_data_in_ptr = 0;
C51 COMPILER V9.55   SPI_SLAVE                                                             05/14/2019 09:24:45 PAGE 2   

  55   2          spi_data_out_ptr = 0;
  56   2          spi_data_ready = 1;
  57   2        }
  58   1      }
  59          
  60          /*
  61          #############################################################################
  62                  Peripheric initialize
  63          #############################################################################
  64          */
  65          
  66          void Init_SPI() 
  67          {
  68   1        
  69   1        //Interruptions
  70   1        EIE1 |= 0x01;
  71   1        
  72   1        // Active Crossbar
  73   1        XBR0 |= 0x02;  //Route les 4 ports de la SPI et les 2 de l'UART0;
  74   1        
  75   1        
  76   1        // Activation des ports 
  77   1        P0MDOUT |= 0xFF;
  78   1        P0MDOUT &= 0xFD;
  79   1        P1MDOUT |= 0xFF;
  80   1        
  81   1        SPI0CFG = 0x87;//Configure CLK SPI (actif front montant) + transmission des 8 bits
  82   1        //SPI0CN |= 0x02; //active mode master
  83   1        SPI0CKR = 0x48; //On definit la fréquence SCK a 150kHz (elle doit etre comprise entre 100 et 200kHz pour 
             -une bonne optimisation)
  84   1        
  85   1        // First Value that MASTER will receive
  86   1        SPI0DAT = 'V';
  87   1        
  88   1        SPI0CN |= 0x01; //active la SPI
  89   1        
  90   1        //SPI0DAT = SPI_START_BYTE;
  91   1      }
  92          
  93          /*
  94          #############################################################################
  95                  Pour µP 8051F020
  96          #############################################################################
  97          */
  98          
  99          void spi_process(OUT_M2* cmd)
 100          {
 101   1        if(spi_data_ready == 1)
 102   1        {
 103   2          spi_parse_cmd(cmd);
 104   2          
 105   2        }
 106   1      }
 107          
 108          void spi_parse_cmd(OUT_M2* cmd)
 109          {
 110   1        switch(spi_data_in[0])
 111   1        {
 112   2          case 0xA1:
 113   2            cmd->Etat_ACQ_Son = ACQ_oui;
 114   2            cmd->ACQ_Duree = spi_data_in[1];
 115   2            break;
C51 COMPILER V9.55   SPI_SLAVE                                                             05/14/2019 09:24:45 PAGE 3   

 116   2          case SPI_GENERATE_SOUND_CMD:
 117   2            cmd->Etat_GEN_Son = GEN_oui;
 118   2            cmd->GEN_freq_code = spi_data_in[1];
 119   2            cmd->GEN_son_Duree = spi_data_in[2];
 120   2            cmd->GEN_silence_Duree = spi_data_in[3];
 121   2            cmd->GEN_nbr_bip = spi_data_in[4];
 122   2            break;
 123   2          case SPI_LIGHT_ON_CMD:
 124   2            cmd->Etat_Lumiere = Allumer;
 125   2            cmd->Lumiere_Intensite = spi_data_in[1];
 126   2            cmd->Lumiere_Duree = spi_data_in[2];
 127   2            cmd->Lumire_Extinction = spi_data_in[3];
 128   2            cmd->Lumiere_Nbre = spi_data_in[4];
 129   2            break;
 130   2          case SPI_LIGHT_OFF_CMD:
 131   2            cmd->Etat_Lumiere = Eteindre;
 132   2            break;
 133   2          case SPI_SERVO_CMD:
 134   2            cmd->Etat_Servo = Servo_oui;
 135   2            cmd->Servo_Angle = (spi_data_in[2] << 8) + spi_data_in[1];
 136   2            break;
 137   2          case 0xA6:
 138   2            switch(spi_data_in[1])
 139   2            {
 140   3              case 1:
 141   3                cmd->Etat_Photo = Photo_1;
 142   3                break;
 143   3              case 2:
 144   3                cmd->Etat_Photo = Photo_Multiple;
 145   3                break;
 146   3              case 3:
 147   3                cmd->Etat_Photo = Photo_continue;
 148   3                break;
 149   3            }
 150   2            cmd->Photo_Duree = spi_data_in[2];
 151   2            cmd->Photo_Nbre = spi_data_in[3];
 152   2            break;
 153   2          case 0xA7:
 154   2            cmd->Etat_Photo = Photo_non;
 155   2            break;
 156   2          default:
 157   2            cmd->Etat_ACQ_Son = ACQ_non;
 158   2            break;
 159   2        }
 160   1        spi_data_ready = 0;
 161   1      }
 162          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    388    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     13    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

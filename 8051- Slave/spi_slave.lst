C51 COMPILER V9.55   SPI_SLAVE                                                             04/11/2019 18:11:42 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE SPI_SLAVE
OBJECT MODULE PLACED IN spi_slave.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\spi_slave.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\spi_
                    -slave.lst) TABS(2) OBJECT(spi_slave.obj)

line level    source

   1          //------------------------------------------------------------------------------------
   2          // master.c
   3          //------------------------------------------------------------------------------------
   4          // DATE: 20/03/2019
   5          //
   6          // Target: C8051F02x
   7          // Tool chain: KEIL Microvision 4
   8          //
   9          //------------------------------------------------------------------------------------
  10          #include "spi_slave.h"
  11          #include "c8051F020.h"
  12          
  13          #include <stdlib.h>
  14          #include <string.h>
  15          
  16          
  17          sbit slave_selector = P1^0;
  18          
  19          
  20          byte spi_data_in[TRAM_SIZE];
  21          byte spi_data_in_ptr = 0;
  22          
  23          byte spi_data_out[TRAM_SIZE] = {0xAA,'a','b','c','d','e','f','d','e',0xBB};
  24          byte spi_data_out_ptr = 0;
  25          
  26          byte data_ready = 0;
  27          
  28          /*
  29          #############################################################################
  30                  Interrupt Routine
  31          #############################################################################
  32          */
  33          
  34          //On remet à zero le bit d'interruption qui est mis a 1 a chaque fin de transfert de donnees
  35          void spi_int() interrupt 6
  36          {
  37   1        byte _delay = 0;
  38   1        
  39   1        // Reset Transmission Flag
  40   1        SPIF = 0;
  41   1        
  42   1        // Read data from MASTER
  43   1        spi_data_in[spi_data_in_ptr] = SPI0DAT;
  44   1        
  45   1        for(_delay = 0 ; _delay < 5 ; _delay++);
  46   1        
  47   1        // Prepare Register with new Data
  48   1        SPI0DAT = spi_data_out[spi_data_out_ptr];
  49   1        
  50   1        spi_data_in_ptr++;
  51   1        spi_data_out_ptr++;
  52   1        
  53   1        // When all Tram is read
  54   1        if(spi_data_in_ptr == TRAM_SIZE)
C51 COMPILER V9.55   SPI_SLAVE                                                             04/11/2019 18:11:42 PAGE 2   

  55   1        {
  56   2          spi_data_in_ptr = 0;
  57   2          spi_data_out_ptr = 0;
  58   2          data_ready = 1;
  59   2        }
  60   1      }
  61          
  62          /*
  63          #############################################################################
  64                  Peripheric initialize
  65          #############################################################################
  66          */
  67          
  68          void Init_SPI() 
  69          {
  70   1        
  71   1        //Interruptions
  72   1        EIE1 |= 0x01;
  73   1        
  74   1        // Active Crossbar
  75   1        XBR0 |= 0x02;  //Route les 4 ports de la SPI et les 2 de l'UART0;
  76   1        
  77   1        
  78   1        // Activation des ports 
  79   1        P0MDOUT |= 0xFF;
  80   1        P0MDOUT &= 0xFD;
  81   1        P1MDOUT |= 0xFF;
  82   1        
  83   1        SPI0CFG = 0x87;//Configure CLK SPI (actif front montant) + transmission des 8 bits
  84   1        //SPI0CN |= 0x02; //active mode master
  85   1        SPI0CKR = 0x48; //On definit la fréquence SCK a 150kHz (elle doit etre comprise entre 100 et 200kHz pour 
             -une bonne optimisation)
  86   1        
  87   1        slave_selector = SLAVE_ENABLE;
  88   1        
  89   1        SPI0CN |= 0x01; //active la SPI
  90   1      }
  91          
  92          /*
  93          #############################################################################
  94                  Pour µP 8051F020
  95          #############################################################################
  96          */
  97          /*
  98          void spi_send_char(char a){
  99              slave_selector = SLAVE_ENABLE;
 100              
 101              SPI0DAT = a;
 102              // Wait until the end of transmission
 103              while(TXBSY == 1) {}
 104              
 105              
 106              slave_selector = SLAVE_DISEABLE;
 107          }
 108          
 109          void spi_transmit(SPI_PACKET* spi_packet)
 110          {
 111            byte ptr = 0;
 112            
 113            // Enable Interrupt
 114            EIE1 |= 0x01;
 115            
C51 COMPILER V9.55   SPI_SLAVE                                                             04/11/2019 18:11:42 PAGE 3   

 116            while(ptr < TRAM_SIZE)
 117            {
 118              spi_send_char(spi_packet->send_data[ptr]);
 119              ptr++;
 120            }
 121            
 122            // DISEABLE INTERRUPT
 123            EIE1 &= 0xFE;
 124            
 125            spi_packet->ready = 1;
 126            
 127            // Check Data Validation TODO
 128          }
 129          
 130          */
 131          void spi_cmd(SPI_PACKET* spi_packet)
 132          {
 133   1        spi_packet->send_data[0] = 0xAA;
 134   1        spi_packet->send_data[1] = 'A';
 135   1        spi_packet->send_data[2] = 'B';
 136   1        spi_packet->send_data[3] = 'C';
 137   1        spi_packet->send_data[4] = 'D';
 138   1        spi_packet->send_data[5] = 'E';
 139   1        spi_packet->send_data[6] = 'F';
 140   1        spi_packet->send_data[7] = 'G';
 141   1        spi_packet->send_data[8] = 'H';
 142   1        spi_packet->send_data[9] = 0xBB;
 143   1      
 144   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    168    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

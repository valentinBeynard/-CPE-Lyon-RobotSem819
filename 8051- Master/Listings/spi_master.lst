C51 COMPILER V9.55   SPI_MASTER                                                            04/11/2019 18:13:35 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE SPI_MASTER
OBJECT MODULE PLACED IN .\Objects\spi_master.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\spi_master.c LARGE OPTIMIZE(2,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT
                    -(.\Listings\spi_master.lst) TABS(2) OBJECT(.\Objects\spi_master.obj)

line level    source

   1          //------------------------------------------------------------------------------------
   2          // master.c
   3          //------------------------------------------------------------------------------------
   4          // DATE: 20/03/2019
   5          //
   6          // Target: C8051F02x
   7          // Tool chain: KEIL Microvision 4
   8          //
   9          //------------------------------------------------------------------------------------
  10          #include "c8051F020.h"
  11          #include "spi_master.h"
  12          #include <stdlib.h>
  13          #include <string.h>
  14          
  15          
  16          sbit slave_selector = P1^0;
  17          
  18          byte spi_data_in[TRAM_SIZE + 1];
  19          byte spi_data_in_ptr = 0;
  20          
  21          byte spi_data_out[TRAM_SIZE];
  22          
  23          /*
  24          #############################################################################
  25                  Interrupt Routine
  26          #############################################################################
  27          */
  28          
  29          //On remet à zero le bit d'interruption qui est mis a 1 a chaque fin de transfert de donnees
  30          void spi_int() interrupt 6
  31          {
  32   1        // Reset Transmission Flag
  33   1        SPIF = 0;
  34   1        
  35   1        // Read data 
  36   1        spi_data_in[spi_data_in_ptr] = SPI0DAT;
  37   1        
  38   1        spi_data_in_ptr++;
  39   1        
  40   1      }
  41          
  42          /*
  43          #############################################################################
  44                  Peripheric initialize
  45          #############################################################################
  46          */
  47          
  48          void Init_SPI() 
  49          {
  50   1        
  51   1        //Interruptions
  52   1        //EIE1 |= 0x01;
  53   1        
  54   1        // Active Crossbar
C51 COMPILER V9.55   SPI_MASTER                                                            04/11/2019 18:13:35 PAGE 2   

  55   1        XBR0 |= 0x02;  //Route les 4 ports de la SPI et les 2 de l'UART0;
  56   1        
  57   1        
  58   1        // Activation des ports 
  59   1        P0MDOUT |= 0xFF;
  60   1        P0MDOUT &= 0xFD;
  61   1        P1MDOUT |= 0xFF;
  62   1        
  63   1        SPI0CFG = 0x87;//Configure CLK SPI (actif front montant) + transmission des 8 bits
  64   1        SPI0CN |= 0x02; //active mode master
  65   1        SPI0CKR = 0x48; //On definit la fréquence SCK a 150kHz (elle doit etre comprise entre 100 et 200kHz pour 
             -une bonne optimisation)
  66   1        
  67   1        slave_selector = SLAVE_ENABLE;
  68   1        
  69   1        SPI0CN |= 0x01; //active la SPI
  70   1      }
  71          
  72          /*
  73          #############################################################################
  74                  Pour µP 8051F020
  75          #############################################################################
  76          */
  77          
  78          void spi_send_char(char a){
  79   1          slave_selector = SLAVE_ENABLE;
  80   1          
  81   1          SPI0DAT = a;
  82   1          // Wait until the end of transmission
  83   1          while(TXBSY == 1) {}
  84   1          
  85   1          slave_selector = SLAVE_DISEABLE;
  86   1      }
  87          
  88          void spi_transmit(SPI_PACKET* spi_packet)
  89          {
  90   1        byte ptr = 0;
  91   1        
  92   1        // Reset Buffer before transmission
  93   1        memset(spi_data_in, 0 , spi_data_in_ptr);
  94   1        spi_data_in_ptr = 0;
  95   1        
  96   1        // Enable Interrupt
  97   1        EIE1 |= 0x01;
  98   1        
  99   1        while(ptr < TRAM_SIZE)
 100   1        {
 101   2          spi_send_char(spi_packet->send_data[ptr]);
 102   2          ptr++;
 103   2        }
 104   1      
 105   1        // DISEABLE INTERRUPT
 106   1        EIE1 &= 0xFE;
 107   1      
 108   1        spi_data_in[spi_data_in_ptr + 1] = '\0';
 109   1        
 110   1        // Get DATA
 111   1        spi_packet->received_data = spi_data_in;
*** WARNING C182 IN LINE 111 OF src\spi_master.c: pointer to different objects
 112   1        
 113   1        spi_packet->ready = 1;
 114   1        
C51 COMPILER V9.55   SPI_MASTER                                                            04/11/2019 18:13:35 PAGE 3   

 115   1        memset(spi_data_out, 0, ptr);
 116   1        
 117   1        // Check Data Validation TODO
 118   1      }
 119          
 120          
 121          void spi_cmd(SPI_PACKET* spi_packet)
 122          {
 123   1        spi_packet->send_data[0] = 0xAA;
 124   1        spi_packet->send_data[1] = 'A';
 125   1        spi_packet->send_data[2] = 'B';
 126   1        spi_packet->send_data[3] = 'C';
 127   1        spi_packet->send_data[4] = 'D';
 128   1        spi_packet->send_data[5] = 'E';
 129   1        spi_packet->send_data[6] = 'F';
 130   1        spi_packet->send_data[7] = 'G';
 131   1        spi_packet->send_data[8] = 'H';
 132   1        spi_packet->send_data[9] = 0xBB;
 133   1      
 134   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    516    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     22       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)

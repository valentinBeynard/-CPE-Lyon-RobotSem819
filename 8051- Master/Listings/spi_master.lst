C51 COMPILER V9.55   SPI_MASTER                                                            04/28/2019 16:27:10 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE SPI_MASTER
OBJECT MODULE PLACED IN .\Objects\spi_master.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\spi_master.c LARGE OPTIMIZE(2,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT
                    -(.\Listings\spi_master.lst) TABS(2) OBJECT(.\Objects\spi_master.obj)

line level    source

   1          //------------------------------------------------------------------------------------
   2          // master.c
   3          //------------------------------------------------------------------------------------
   4          // DATE: 20/03/2019
   5          //
   6          // Target: C8051F02x
   7          // Tool chain: KEIL Microvision 4
   8          //
   9          //------------------------------------------------------------------------------------
  10          #include "c8051F020.h"
  11          #include "spi_master.h"
  12          #include <stdlib.h>
  13          #include <string.h>
  14          
  15          
  16          sbit slave_selector = P1^0;
  17          
  18          byte spi_data_in[TRAM_SIZE];
  19          byte spi_data_in_ptr = 0;
  20          
  21          byte spi_data_out[TRAM_SIZE];
  22          
  23          /*
  24          #############################################################################
  25                  Interrupt Routine
  26          #############################################################################
  27          */
  28          
  29          //On remet à zero le bit d'interruption qui est mis a 1 a chaque fin de transfert de donnees
  30          void spi_int() interrupt 6
  31          {
  32   1        // Reset Transmission Flag
  33   1        SPIF = 0;
  34   1        
  35   1        // Read 
  36   1        spi_data_in[spi_data_in_ptr] = SPI0DAT;
  37   1        
  38   1        spi_data_in_ptr++;
  39   1        
  40   1      }
  41          
  42          /*
  43          #############################################################################
  44                  Peripheric initialize
  45          #############################################################################
  46          */
  47          
  48          void Init_SPI() 
  49          {
  50   1        
  51   1        //Interruptions
  52   1        //EIE1 |= 0x01;
  53   1        
  54   1        // Active Crossbar
C51 COMPILER V9.55   SPI_MASTER                                                            04/28/2019 16:27:10 PAGE 2   

  55   1        XBR0 |= 0x02;  //Route les 4 ports de la SPI et les 2 de l'UART0;
  56   1        
  57   1        
  58   1        // Activation des ports 
  59   1        P0MDOUT |= 0xFF;
  60   1        P0MDOUT &= 0xFD;
  61   1        P1MDOUT |= 0xFF;
  62   1        
  63   1        SPI0CFG = 0x87;//Configure CLK SPI (actif front montant) + transmission des 8 bits
  64   1        SPI0CN |= 0x02; //active mode master
  65   1        SPI0CKR = 0x48; //On definit la fréquence SCK a 150kHz (elle doit etre comprise entre 100 et 200kHz pour 
             -une bonne optimisation)
  66   1        
  67   1        slave_selector = SLAVE_ENABLE;
  68   1        
  69   1        SPI0CN |= 0x01; //active la SPI
  70   1      }
  71          
  72          /*
  73          #############################################################################
  74                  Pour µP 8051F020
  75          #############################################################################
  76          */
  77          
  78          void spi_send_char(char a){
  79   1          slave_selector = SLAVE_ENABLE;
  80   1          
  81   1          SPI0DAT = a;
  82   1          // Wait until the end of transmission
  83   1          while(TXBSY == 1) {}
  84   1          
  85   1          slave_selector = SLAVE_DISEABLE;
  86   1      }
  87          
  88          void spi_transmit(SPI_PACKET* spi_packet)
  89          {
  90   1        byte ptr = 0;
  91   1        byte _delay = 0;
  92   1        
  93   1        // Reset Buffer before transmission
  94   1        memset(spi_data_in, 0 , spi_data_in_ptr);
  95   1        spi_data_in_ptr = 0;
  96   1        
  97   1        // Enable Interrupt
  98   1        EIE1 |= 0x01;
  99   1        
 100   1        while(ptr < TRAM_SIZE)
 101   1        {
 102   2          spi_send_char(spi_packet->send_data[ptr]);
 103   2          ptr++;
 104   2          // Wait at least 2 CLK before update SPIODAT
 105   2          for(_delay = 0 ; _delay < 20 ; _delay++);
 106   2        }
 107   1      
 108   1        // DISEABLE INTERRUPT
 109   1        EIE1 &= 0xFE;
 110   1      
 111   1        // Check if received _data are correct througth SPI Slave Flag 'VALID'
 112   1        if(spi_validate() == 0)
 113   1        {
 114   2          spi_error();
 115   2        }
C51 COMPILER V9.55   SPI_MASTER                                                            04/28/2019 16:27:10 PAGE 3   

 116   1        else{
 117   2          spi_packet->ready = 1;
 118   2        }
 119   1        
 120   1        // Get DATA
 121   1        spi_packet->received_data = spi_data_in;
*** WARNING C182 IN LINE 121 OF src\spi_master.c: pointer to different objects
 122   1        
 123   1        memset(spi_data_out, 0, ptr);
 124   1        
 125   1      }
 126          
 127          void spi_process(OUT_M1 * cmd, SPI_PACKET* spi_packet)
 128          {
 129   1        if(cmd->Etat_ACQ_Son == ACQ_oui)
 130   1        {
 131   2          
 132   2        }
 133   1        else if(cmd->Etat_GEN_Son == GEN_oui)
 134   1        {
 135   2          spi_cmd_generate_sound(cmd, spi_packet);
 136   2          cmd->Etat_GEN_Son = GEN_non;
 137   2          spi_packet->ready = 1;
 138   2        }
 139   1        else if(cmd->Etat_Lumiere != Lumiere_non)
 140   1        {
 141   2          if(cmd->Etat_Lumiere == Allumer)
 142   2          {
 143   3            spi_cmd_light_ON(cmd, spi_packet);
 144   3            cmd->Etat_Lumiere = Lumiere_non;
 145   3            spi_packet->ready = 1;
 146   3          }
 147   2          else
 148   2          {
 149   3            spi_cmd_light_OFF(cmd, spi_packet);
 150   3            cmd->Etat_Lumiere = Lumiere_non;
 151   3            spi_packet->ready = 1;
 152   3          }
 153   2        }
 154   1        else if(cmd->Etat_Servo == Servo_V)
 155   1        {
 156   2          spi_cmd_servo(cmd, spi_packet);
 157   2          cmd->Etat_Servo = Servo_non;
 158   2          spi_packet->ready = 1;
 159   2        }
 160   1        else if(cmd->Etat_Photo != Photo_non)
 161   1        {
 162   2          spi_cmd_photo_ON(cmd, spi_packet);
 163   2          cmd->Etat_Photo = Photo_non;
 164   2          spi_packet->ready = 1;
 165   2        }
 166   1        else
 167   1        {
 168   2          spi_cmd_photo_OFF(cmd, spi_packet);
 169   2          cmd->Etat_Photo = Photo_non;
 170   2          spi_packet->ready = 1;
 171   2        }
 172   1        
 173   1        
 174   1        if(spi_packet->ready == 1)
 175   1        {
 176   2          spi_transmit(spi_packet);
C51 COMPILER V9.55   SPI_MASTER                                                            04/28/2019 16:27:10 PAGE 4   

 177   2          spi_packet->ready = 0;
 178   2        }
 179   1        
 180   1      }
 181          
 182          void spi_cmd_servo(OUT_M1 * cmd, SPI_PACKET* spi_packet)
 183          {
 184   1        spi_packet->send_data[0] = SPI_SERVO_CMD;
 185   1        spi_packet->send_data[1] = (cmd->Servo_Angle);
 186   1        spi_packet->send_data[2] = (cmd->Servo_Angle) >> 8;
 187   1        spi_packet->send_data[3] = 0;
 188   1        spi_packet->send_data[4] = 0;
 189   1      }
 190          
 191          void spi_cmd_light_ON(OUT_M1 * cmd, SPI_PACKET* spi_packet)
 192          {
 193   1        spi_packet->send_data[0] = SPI_LIGHT_ON_CMD;
 194   1        spi_packet->send_data[1] = (cmd->Lumiere_Intensite);
 195   1        spi_packet->send_data[2] = (cmd->Lumiere_Duree);
 196   1        spi_packet->send_data[3] = (cmd->Lumire_Extinction);
 197   1        spi_packet->send_data[4] = (cmd->Lumiere_Nbre);
 198   1        
 199   1      }
 200          
 201          void spi_cmd_light_OFF(OUT_M1 * cmd, SPI_PACKET* spi_packet)
 202          {
 203   1        spi_packet->send_data[0] = SPI_LIGHT_OFF_CMD;
 204   1        spi_packet->send_data[1] = 0;
 205   1        spi_packet->send_data[2] = 0;
 206   1        spi_packet->send_data[3] = 0;
 207   1        spi_packet->send_data[4] = 0;
 208   1        
 209   1      }
*** WARNING C280 IN LINE 201 OF src\spi_master.c: 'cmd': unreferenced local variable
 210          
 211          void spi_cmd_generate_sound(OUT_M1 * cmd, SPI_PACKET* spi_packet)
 212          {
 213   1        spi_packet->send_data[0] = SPI_GENERATE_SOUND_CMD;
 214   1        spi_packet->send_data[1] = (cmd->GEN_freq_code);
 215   1        spi_packet->send_data[2] = (cmd->GEN_son_Duree);
 216   1        spi_packet->send_data[3] = (cmd->GEN_silence_Duree);
 217   1        spi_packet->send_data[4] = (cmd->GEN_nbr_bip);
 218   1      }
 219          
 220          void spi_cmd_photo_ON(OUT_M1 * cmd, SPI_PACKET* spi_packet)
 221          {
 222   1        
 223   1        spi_packet->send_data[0] = SPI_PHOTO_ON_CMD;
 224   1        spi_packet->send_data[1] = cmd->Etat_Photo;
 225   1        spi_packet->send_data[2] = cmd->Photo_Duree;
 226   1        spi_packet->send_data[3] = cmd->Photo_Nbre;
 227   1        spi_packet->send_data[4] = 0;
 228   1        
 229   1      }
 230          
 231          void spi_cmd_photo_OFF(OUT_M1 * cmd, SPI_PACKET* spi_packet)
 232          {
 233   1        spi_packet->send_data[0] = SPI_PHOTO_OFF_CMD;
 234   1        spi_packet->send_data[1] = 0;
 235   1        spi_packet->send_data[2] = 0;
 236   1        spi_packet->send_data[3] = 0;
 237   1        spi_packet->send_data[4] = 0;
C51 COMPILER V9.55   SPI_MASTER                                                            04/28/2019 16:27:10 PAGE 5   

 238   1      }
*** WARNING C280 IN LINE 231 OF src\spi_master.c: 'cmd': unreferenced local variable
 239          
 240          byte spi_validate()
 241          {
 242   1        int hash = 0, i =0;
 243   1        
 244   1        for(i = 0; i < 5 ; i++)
 245   1        {
 246   2          hash += spi_data_in[i];
 247   2        }
 248   1        
 249   1        if(hash != 368)
 250   1        {
 251   2          return 0;
 252   2        }
 253   1        else 
 254   1        {
 255   2          return 1;
 256   2        }
 257   1      }
 258          
 259          void spi_error()
 260          {
 261   1        spi_data_in[0] = 'E';
 262   1        spi_data_in[1] = 'R';
 263   1        spi_data_in[2] = 'R';
 264   1        spi_data_in[3] = 'O';
 265   1        spi_data_in[4] = 'R';
 266   1      }
 267          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2230    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11      52
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)

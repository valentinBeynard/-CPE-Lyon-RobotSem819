C51 COMPILER V9.55   MAIN                                                                  04/18/2019 18:35:48 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\main.c LARGE OPTIMIZE(2,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "debug.h"
   2          #include "commands_parser.h"
   3          #include "serializer.h"
   4          #include "distance_detector.h"
   5          
   6          #include <stdlib.h>
   7          #include <stdio.h>
   8          #include <string.h>
   9          
  10          #include "spi_master.h"
  11          
  12          /*
  13          #############################################################################
  14                  PIN List
  15          #############################################################################
  16          *
  17          * UART0 = TX0 -> P0.0 | RX0 -> P0.1 
  18          *
  19          * SPI = SCK -> P0.2 | MISO -> P0.3 | MOSI -> P0.4 | NSS -> P0.5
  20          *       SCK : OUT
  21          *       MISO : IN
  22          *       MOSI : OUT
  23          *       NSS : Vcc
  24          *
  25          * UART1 : TX1 -> P0.6 | RX1 -> P0.7
  26          *
  27          * Pin NSS_slave : P1.0
  28          *
  29          * Pin Servo_H : P1.2
  30          *
  31          * Pin ADC1 : AIN0
  32          *
  33          *
  34          *
  35          *
  36          */
  37          
  38          
  39          sfr Reg = 0xFF;
  40          
  41            OUT_M1 commands = {Epreuve_non, // Numéro Epreuve
  42                                Mouvement_non,  // Etat mouvement
  43                                0,  //  Vitesse
  44                                0,  // Coord_X
  45                                0,  // Coord_Y
  46                                0,  // Angle
  47                                ACQ_non,//ACQ_non,  // Commande d'acquisition du son
  48                                0,  // Durée d'acquisition
  49                                GEN_non,
  50                                0,  //  Code fréquence
  51                                0,  // Duree son
  52                                0,  // Duree silence
  53                                0,  // Nombre de bip
  54                                DCT_non,  // Commande de détection d'obstacle
C51 COMPILER V9.55   MAIN                                                                  04/18/2019 18:35:48 PAGE 2   

  55                                0,  // Résolution angulaire de la détection d'obstacle
  56                                Lumiere_non,  // Commande d'allumage du pointeur lumineux
  57                                0,  //Intensitée lumineuse
  58                                0,  // Durée d'allumage
  59                                0,  // Durée d'extinction
  60                                0,  // Nombre de cycles d'allumage
  61                                Servo_non,  // Commande de position du servo
  62                                0,  // Paramètre angle
  63                                Energie_non,  // Commande relevée courant
  64                                Position_non, // Commande de gestion de position
  65                                0,  // Coord X de position
  66                                0,  // Coord Y de position
  67                                0,  // Angle
  68                                Photo_non,  // Commande de prise de phot
  69                                0,  // Temps entre deux photo
  70                                0 // Nbr de photo
  71                                };
  72                                
  73            IN_M1 informations = { Invite_non,  // Identifieur de l'etat d'Invite
  74                                    "Start Epreuve !\n",  // Ptr sur la chaine contenant le msg d'invite
  75                                    BUT_Atteint_non,  // Arrivée au point transmit
  76                                    BUT_Servo_non,  // Information position servomoteur
  77                                    DCT_Obst_non, // Mode de détection d'obstacle
  78                                    0,  // ptr vers tableau des distances
  79                                    0,  // taille du tableau 
  80                                    RESULT_Courant_non, // Identificateur pour la mesure de courant
  81                                    0,  // Valeur de courant relevée
  82                                    RESULT_Energie_non, // Identificateur pour la mesure d'énergie
  83                                    0,  // Valeur d'énergie relevée
  84                                    RESULT_Position_non,  // Identificateur de position du robot
  85                                    0,  // Coord X
  86                                    0,  // Coord Y
  87                                    0,  // Angle
  88                                    Aux_non,  // Identificateur pour la commande auxiliare
  89                                    0 // ptr vers la chaîne de caractère auxiliare
  90                                };
  91            
  92            
  93                
  94                                
  95          PARSER_RESULT parser_result = {1 , &commands, &informations};
  96          DD_PACKET dd_packet = {&commands, &informations, 0.0, 0};
  97          SPI_PACKET spi_packet = { 0, {0xA5,0x00,0x64,'F','G'}, 0};
  98          
  99          void Init_External_clk()
 100          {
 101   1        // Config External Osci
 102   1        OSCXCN = 0x67;
 103   1        while(OSCXCN != 0xE7) {}
 104   1        
 105   1        // Use Exern CLK
 106   1        OSCICN = 0x08;
 107   1          
 108   1        CKCON = 0x00;
 109   1      }
 110          
 111          void Enable_Crossbar()
 112          {
 113   1        // Enable Crossbar
 114   1        XBR2 |= 0x40;
 115   1      }
 116          
C51 COMPILER V9.55   MAIN                                                                  04/18/2019 18:35:48 PAGE 3   

 117          void enable_general_Int()
 118          {
 119   1        EA = 1; // Enable general interruption
 120   1      }
 121          
 122          
 123          int main (void)
 124          {
 125   1        char mes[10];
 126   1        float f = 0.0;
 127   1        int angle = 80;
 128   1        int ij = 0;
 129   1        
 130   1        
 131   1        Reg = 0xDE;   // Dévalidation du watchdog 
 132   1        Reg = 0xAD;
 133   1        
 134   1        // µP candencé sur clk extern à 22 MHz           
 135   1        Init_External_clk();
 136   1        
 137   1        // Initialise l'UART0 et le Timer 2 pour le parser de commandes       
 138   1        init_parser();
 139   1          
 140   1        // Initialise l'UART1 utilisé pour communiquer avec le sérializer
 141   1        init_serializer_UART1();
 142   1                    
 143   1        Init_distance_detector();
 144   1        
 145   1        Init_SPI();
 146   1        
 147   1        Enable_Crossbar();
 148   1      
 149   1        enable_general_Int();
 150   1        
 151   1        USART_print("Start Routine \n\n");
 152   1        USART_print("Waiting for Serializer Init Processing... \n\n");
 153   1        
 154   1      
 155   1                
 156   1        //serializer_init_serial();
 157   1                    
 158   1        USART_print("\n\n#############################\n\n>");
 159   1      
 160   1        //serializer_print("mogo 1:50 2:50");
 161   1                  
 162   1        while(1)
 163   1        {
 164   2          
 165   2          cmd_parser_process(&parser_result);
 166   2          
 167   2          if( parser_result.commands->Etat_Epreuve == Stop_Urgence)
 168   2          {
 169   3            USART_print("Quit");
 170   3            break;
 171   3          }
 172   2          
 173   2          if( parser_result.commands->Etat_Epreuve == epreuve1)
 174   2          {
 175   3            //USART_print(parser_result.informations.MSG_Invit);      
 176   3            
 177   3            serializer_process(&parser_result);
 178   3            
C51 COMPILER V9.55   MAIN                                                                  04/18/2019 18:35:48 PAGE 4   

 179   3            
 180   3            distance_detector_process(&dd_packet);
 181   3            
 182   3            spi_process(&commands, &spi_packet);
 183   3            
 184   3            //USART_print(spi_packet.spi_data);
 185   3            
 186   3            if(parser_result.commands->Etat_DCT_Obst == oui_180)
 187   3            {
 188   4              dd_packet.measure = dd_start_conversion();
 189   4              sprintf(mes, "%f", dd_packet.measure);
 190   4              USART_print(mes);
 191   4              memset(mes, 0, 10);
 192   4              parser_result.commands->Etat_DCT_Obst = DCT_non;
 193   4            }
 194   3            
 195   3            if(parser_result.informations->Etat_BUT_Mouvement == BUT_Atteint_oui)
 196   3            {
 197   4              USART_print("Target Reached !! Success !\n");
 198   4              parser_result.informations->Etat_BUT_Mouvement = BUT_Atteint_non;
 199   4            }
 200   3            
 201   3          }
 202   2          else{
 203   3            parser_result.commands->Etat_Mouvement = Mouvement_non;
 204   3          }
 205   2          
 206   2        }
 207   1        
 208   1        USART_print("Fin Soft");
 209   1        
 210   1        while(1){}
 211   1          
 212   1        /*spi_packet.ready = 1;
 213   1        while(1)
 214   1        {
 215   1          //spi_transmit(&spi_packet);
 216   1            //spi_process(&commands, &spi_packet);
 217   1            
 218   1          
 219   1              USART_print("SPI START TS ! \n ");
 220   1              spi_transmit(&spi_packet);
 221   1              spi_packet.ready = 0;
 222   1              USART_print("RESULT : ");
 223   1              USART_print(spi_packet.received_data);
 224   1              USART_print("\n");
 225   1        }*/
 226   1        
 227   1      }
 228          
 229          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    458    ----
   CONSTANT SIZE    =    160    ----
   XDATA SIZE       =     85      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.55   MAIN                                                                  04/18/2019 18:35:48 PAGE 5   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

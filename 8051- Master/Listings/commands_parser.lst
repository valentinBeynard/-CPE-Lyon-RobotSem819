C51 COMPILER V9.55   COMMANDS_PARSER                                                       04/17/2019 18:02:21 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE COMMANDS_PARSER
OBJECT MODULE PLACED IN .\Objects\commands_parser.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\commands_parser.c LARGE OPTIMIZE(2,SPEED) BROWSE DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\commands_parser.lst) TABS(2) OBJECT(.\Objects\commands_parser.obj)

line level    source

   1          #include "commands_parser.h"
   2          #include <string.h>
   3          //#include <stdlib.h>
   4          
   5          /*
   6              DISPATCH TABLE
   7          
   8              Tableau regroupant commande et fonction associée
   9              On utilise un tablleau de structure CMD_ afin de référencer toutes les
  10              commandes implémentées et les lier à une fonctionnalitée.
  11          */
  12          const CMD_ dispatch_table [NUMBER_OF_COMMAND] = {
  13              /*{"Nom de la Commande", Nombre minimum d'arg à rentrer, nombre d'arg  possible, function},
  14            Exemple : 
  15            
  16            La commande "RA sens:valeur", est rentré comme suit : "RA D:90"
  17            
  18            Le cahier des Charges spécifie qu'on peut le sens de la rotation donné par l'arg sens peut
  19            ne pas être rentré. On a donc que l'arg 'valeur' obligatoire à rentrer.
  20            Donc min_arg_size = 1
  21            Les arg possibles sont D ou G et une valeur. On a donc au maximum 2 arg à rentrer.
  22            Donc max_arg_size = 2
  23            Les noms d'arg possible sont D, G, donc args_label = {"D", "G"}
  24            */
  25              {"D", epreuve_cmd},
  26              {"E", epreuve_stop},
  27              {"Q", safety_break_cmd},
  28              {"TV", set_default_speed_cmd},
  29              {"A", move_forward_cmd},
  30              {"B", move_backward_cmd},
  31              {"S", move_stop_cmd},
  32              {"RD", rigth_rotation_cmd},
  33              {"RG", left_rotation_cmd},
  34              {"RC", complete_rotation_cmd},
  35              {"RA", angle_rotation_cmd},
  36              {"G", &move_to_cmd},
  37              {"ASS", move_to_cmd},
  38              {"MI", default_process},
  39              {"ME", default_process},
  40              {"IPO", default_process},
  41              {"POS", default_process},
  42              {"MOU", detecte_obstacle},
  43              {"MOB", default_process},
  44              {"MOS", default_process},
  45              {"SD", default_process},
  46              {"L", &light_beam_ON_cmd},
  47              {"LS", &light_beam_OFF_cmd},
  48              {"CS", &servo_move_cmd},
  49              {"PPH", default_process},
  50              {"SPH", default_process},
  51              {"AUX", default_process}
  52          };
  53          
  54          /*
C51 COMPILER V9.55   COMMANDS_PARSER                                                       04/17/2019 18:02:21 PAGE 2   

  55              FULL STATE MACHINE
  56          
  57              Liste des Etats de la machines d'état du Parser associés à leur fonction
  58          */
  59          const FSM_PROCESS full_state_machine[3] = {
  60              {WAIT, &wait},
  61              {GET_COMMAND, &get_command},
  62              {SEND_COMMAND, &wait}
  63          };
  64          
  65          /* Etat courant de la machine d'Etat */
  66          COMMANDS_PARSER_STATE current_state = WAIT;
  67          
  68          /* Buffer principal dans lesquel est stocké tout caractère reçu sur la liaison UART du µP */
  69          byte raw_data[COMMAND_BUFFER_SIZE];
  70          
  71          /* Pointer permettant de parcourir le Buffer Principal */
  72          byte buffer_index = 0;
  73          
  74          /*
  75          #############################################################################
  76                  Pour µP 8051F020
  77          #############################################################################
  78          */
  79          
  80          /**
  81            8051 µP :
  82            Initialize devices for commands_parser : UART0 and Timer 2
  83            UART0 = TX0 -> P0.0 | RX0 -> P0.1
  84          **/
  85          byte init_parser()
  86          {
  87   1        
  88   1        /****** INIT UART0 *****/
  89   1        SM00 = 0;
  90   1        SM10 = 1;
  91   1        REN0 = 1;   
  92   1          
  93   1        /****** INIT PIN *****/
  94   1        P0MDOUT |= 0x03;
  95   1        
  96   1        /****** Init UART0 on Crossbar *****/
  97   1        XBR0 |= 0x04;
  98   1      
  99   1        
 100   1        /****** INIT TIMER ******/
 101   1        CKCON = 0x00; // Set CLK divider to 12 for timer 0 and 2
 102   1        
 103   1        
 104   1        // Réglage timer 2
 105   1        T2CON = 0x0D; // Capture Mode & Counter Mode & Enable & External Trig enable
 106   1        RCLK0 = 1;
 107   1        TCLK0 = 1;
 108   1        RCAP2L = 0xDC;
 109   1        RCAP2H = 0xFF;
 110   1        TR2 = 1;
 111   1        
 112   1        return 0;
 113   1      }
 114          
 115          void USART_receive(byte* read_byte)
 116          {
C51 COMPILER V9.55   COMMANDS_PARSER                                                       04/17/2019 18:02:21 PAGE 3   

 117   1        if(RI0 == 1)
 118   1        {
 119   2          *read_byte = SBUF0;
 120   2          RI0 = 0;
 121   2        }else{
 122   2          *read_byte = '*';
 123   2        }
 124   1      }
 125          
 126          void USART_send(byte ch)
 127          {
 128   1        SBUF0 = ch;
 129   1        while(TI0 == 0){}
 130   1        TI0 = 0;
 131   1      }
 132          
 133          
 134          
 135          /*
 136          #############################################################################
 137                  Core Code of commands_parser.c
 138          #############################################################################
 139          */
 140          
 141          void USART_print(char* str)
 142          {
 143   1        byte i = 0;
 144   1        for(i = 0 ; i < strlen(str); i++)
 145   1        {
 146   2          USART_send(*(str+i));
 147   2        }
 148   1      }
 149          
 150          
 151          //const FSM_PROCESS* cmd_parser_next_state()
 152          void cmd_parser_process(PARSER_RESULT* result)
 153          {
 154   1        //return &full_state_machine[current_state];
 155   1        /*
 156   1          En utilisant un pointer de function, un problème en mémoire apparait
 157   1          et le programme ne fonctionne plus comme prévu...
 158   1          Il semblerait que lorsqu'on arrive à l'appelle de wait par le biais
 159   1          de son ptr créer le problème. A ce moment, on vient écrire à l'adresse 0x000114
 160   1          de "result" la valeur du ptr de result...
 161   1        */
 162   1        //(full_state_machine[current_state]).state_process(result);
 163   1        
 164   1        /*
 165   1          Sans passer par les pointer de fonctions, plus de problème ...
 166   1        */
 167   1        switch(current_state)
 168   1        {
 169   2          case WAIT:
 170   2            wait(result);
 171   2            break;
 172   2          case GET_COMMAND:
 173   2            get_command(result);
 174   2            break;
 175   2          default:
 176   2            wait(result);
 177   2          break;
 178   2          
C51 COMPILER V9.55   COMMANDS_PARSER                                                       04/17/2019 18:02:21 PAGE 4   

 179   2        }
 180   1        //wait(result);
 181   1      }
 182          
 183          void wait(PARSER_RESULT* parser_result)
 184          {
 185   1        byte read_byte = '*';
 186   1      
 187   1        // Scrutation sur l'UART0
 188   1        USART_receive(&read_byte);
 189   1        
 190   1        // For WARNING C280 supression
 191   1        parser_result = parser_result;
 192   1      
 193   1        // Si on lit un caractère
 194   1        if(read_byte != '*'){
 195   2            if(read_byte == STOP_BYTE)
 196   2            {
 197   3              // On passe à l'Etat 'Get Command' après avoir terminé de préparer le Buffer
 198   3              //USART_print("\nCommand Mode !\n");
 199   3              raw_data[buffer_index] = read_byte;
 200   3              buffer_index++;
 201   3              // Tjrs ajouter un '\0' à la fin du buffer, sinon strlen ne marche pas...
 202   3              raw_data[buffer_index] = '\0';
 203   3              current_state = GET_COMMAND;
 204   3            }else{
 205   3              USART_send(read_byte);
 206   3              raw_data[buffer_index] = read_byte;
 207   3              buffer_index++;
 208   3            }
 209   2        }
 210   1      }
 211          
 212          
 213          void get_command(PARSER_RESULT* parser_result)
 214          {
 215   1          // On analyse le buffer brute
 216   1          if (!parse(parser_result))
 217   1          {
 218   2            //USART_print("Error decoding cmd !");
 219   2            error_cmd_flag();
 220   2          }else{
 221   2            valid_cmd_flag();
 222   2          }
 223   1          
 224   1          // Clear le buffer pour la prochaine lecture
 225   1          memset(raw_data, 0, strlen(raw_data));
 226   1          buffer_index = 0;
 227   1          // On revient dans l'Etat où on scrute l'UART0
 228   1          current_state = WAIT;
 229   1      }
 230          
 231          
 232          byte parse(PARSER_RESULT* parser_result)
 233          {
 234   1        // Tableau dans lequel on va ranger : [Nom_Commande][Param1][Valeur1][...]
 235   1        char commands_data[MAX_COMMAND_WORD][ARGS_BUFFER_SIZE];
 236   1        // Pointers pour parcourir les différents buffers
 237   1        byte data_index = 0, ptr = 0, reading_ptr = 0;
 238   1        byte ret = 0;
 239   1        char c = 0, i = 0;
 240   1        char run = 1;
C51 COMPILER V9.55   COMMANDS_PARSER                                                       04/17/2019 18:02:21 PAGE 5   

 241   1        /*char** ptra = 0;
 242   1        char** ptrb = 0;
 243   1        char* t = 0;
 244   1        char* v = 0;*/
 245   1      
 246   1        CMD_PACKET cmd_packet;
 247   1      
 248   1        // Dispatches commands and arguments in commands_data buffer
 249   1        while(run)
 250   1        {
 251   2            c = *(raw_data + reading_ptr);
 252   2            /*t = (commands_data + data_index);
 253   2            v = commands_data[data_index];*/
 254   2            switch (c)
 255   2            {
 256   3              case COMMAND_SEPARATOR:
 257   3                //*( *(commands_data + data_index) + ptr ) = '\0';
 258   3                //USART_print(commands_data[data_index]);
 259   3                data_index++;
 260   3                ptr = 0;
 261   3                break;
 262   3      
 263   3              case ARG_VALUE_SEPARATOR:
 264   3                //*( *(commands_data + data_index) + ptr ) = '\0';
 265   3                //USART_print(commands_data[data_index]);
 266   3                data_index++;
 267   3                ptr = 0;
 268   3                break;
 269   3      
 270   3                // Fin de l'analyse
 271   3              case STOP_BYTE:
 272   3                //*( *(commands_data + data_index) + ptr ) = '\0';
 273   3                //USART_print(commands_data[data_index]);
 274   3                run = 0;
 275   3                break;
 276   3      
 277   3              default:
 278   3                *( *(commands_data + data_index) + ptr ) = c;
 279   3                ptr++;
 280   3            }
 281   2      
 282   2            reading_ptr++;
 283   2        }
 284   1        
 285   1        // Préparation du packet
 286   1        
 287   1        cmd_packet.commands_data = (char*)commands_data;
 288   1        cmd_packet.cmd_size = data_index;
 289   1        cmd_packet.commands = (parser_result->commands);
 290   1      
 291   1        
 292   1        // Looking for the command in the Command Dictionnary
 293   1        for(i = 0 ; i < NUMBER_OF_COMMAND; i++)
 294   1        {
 295   2          if(strcmp(*(commands_data), dispatch_table[i].name) == 0)
 296   2          {
 297   3            // On test la validité des args entré par l'user
 298   3            if(dispatch_table[i].process(&cmd_packet) != 0)
 299   3            {
 300   4              ret = 1;
 301   4            }else{
 302   4              USART_print("Cmd Erreur !!!!");
C51 COMPILER V9.55   COMMANDS_PARSER                                                       04/17/2019 18:02:21 PAGE 6   

 303   4              ret = 0;
 304   4            }
 305   3            /*
 306   3            USART_print("Find Command : ");
 307   3            USART_print(dispatch_table[i].name);
 308   3            USART_send('\n');
 309   3            */
 310   3            
 311   3          }
 312   2        }
 313   1      
 314   1        //clear_buffer(commands_data, data_index+1);
 315   1        memset(commands_data, 0 , MAX_COMMAND_WORD * ARGS_BUFFER_SIZE);
 316   1        //memset(cmd_packet.commands_data, 0 , MAX_COMMAND_WORD * ARGS_BUFFER_SIZE);
 317   1        //clear_buffer(cmd_packet.commands_data, data_index+1);
 318   1      
 319   1        return ret;
 320   1      }
 321          
 322          void valid_cmd_flag()
 323          {
 324   1        USART_send(0x0D);
 325   1        USART_send(0x0A);
 326   1        USART_send(COMMAND_CONFIRM_BYTE);
 327   1      }
 328          
 329          void error_cmd_flag()
 330          {
 331   1        USART_send(0x0D);
 332   1        USART_send(0x0A);
 333   1        USART_send(COMMAND_ERROR_BYTE); 
 334   1      }
 335          
 336          /*
 337          void send_command(PARSER_RESULT* parser_result)
 338          {
 339            // For WARNING C280 supression
 340            parser_result = parser_result;
 341            
 342            // Nothing TODO
 343          }
 344          */
 345          
 346          /*
 347          char encode_data()
 348          {
 349          
 350          
 351          }*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    971    ----
   CONSTANT SIZE    =     98    ----
   XDATA SIZE       =    276     235
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

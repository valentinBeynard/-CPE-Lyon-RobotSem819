C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE COMMANDS
OBJECT MODULE PLACED IN .\Objects\commands.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\commands.c LARGE OPTIMIZE(2,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.
                    -\Listings\commands.lst) TABS(2) OBJECT(.\Objects\commands.obj)

line level    source

   1          #include "commands.h"
   2          #include <stdlib.h>
   3          #include <stdio.h>
   4          #include <string.h>
   5          
   6          byte default_process(CMD_PACKET* cmd_packet)
   7          {
   8   1        //printf("Non-implemented command !!");
   9   1        cmd_packet->commands->Etat_Epreuve = (enum Epreuve)1;
  10   1        
  11   1        return 1;
  12   1      }
  13          
  14          /*
  15            Commande de démarage de l'épreuve : D [Numéro Epreuve]
  16            Si aucun paramètre rentré, alors on démarre à l'épreuve 1
  17          */
  18          byte epreuve_cmd(CMD_PACKET* cmd_packet)
  19          {
  20   1        int epreuve_index = 1;
  21   1      
  22   1        // Trop d'argument
  23   1        if(cmd_packet->cmd_size > 1)
  24   1        {
  25   2          return 0;
  26   2        }
  27   1      
  28   1        // Si le paramètre correspondant au numéro d'épreuve est présent
  29   1        if(cmd_packet->cmd_size == 1)
  30   1        {
  31   2          // Si valeur non numérique
  32   2          if(sscanf((cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE)), "%u", &epreuve_index) != 1)
  33   2          {
  34   3            return 0;
  35   3          }
  36   2      
  37   2          // Si pas dans l'intervalle de valeur acceptées
  38   2          if(epreuve_index < 1 || epreuve_index > 9)
  39   2          {
  40   3            return 0;
  41   3          }
  42   2          
  43   2          cmd_packet->commands->Etat_Epreuve = (enum Epreuve)epreuve_index;
  44   2        }
  45   1        else
  46   1        {
  47   2          cmd_packet->commands->Etat_Epreuve = epreuve1;
  48   2        }
  49   1        return 1;
  50   1      }
  51          
  52          byte epreuve_stop(CMD_PACKET* cmd_packet)
  53          {
  54   1        //printf("Non-implemented command !!");
C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 2   

  55   1        cmd_packet->commands->Etat_Epreuve = Epreuve_non;
  56   1        
  57   1        return 1;
  58   1      }
  59          
  60          
  61          byte safety_break_cmd(CMD_PACKET* cmd_packet)
  62          {
  63   1        // Trop d'argument
  64   1        if(cmd_packet->cmd_size > 0)
  65   1        {
  66   2          return 0;
  67   2        }
  68   1      
  69   1        cmd_packet->commands->Etat_Epreuve = Stop_Urgence;
  70   1        
  71   1        return 1;
  72   1      }
  73          
  74          byte set_default_speed_cmd(CMD_PACKET* cmd_packet)
  75          {
  76   1        int motor_speed = 20;
  77   1        
  78   1        // Seu la commande TV valeur est acceptée
  79   1        if(cmd_packet->cmd_size != 1)
  80   1        {
  81   2          return 0;
  82   2        }
  83   1        
  84   1        // Si valeur non numérique
  85   1        if(sscanf((cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE)), "%d", &motor_speed) != 1)
  86   1        {
  87   2          return 0;
  88   2        }
  89   1        
  90   1        // Si pas dans l'intervalle de valeur acceptées
  91   1        if(motor_speed < 0 || motor_speed > 100)
  92   1        {
  93   2          return 0;
  94   2        }
  95   1        
  96   1        cmd_packet->commands->Vitesse = motor_speed;
  97   1      
  98   1        return 1;
  99   1      }
 100          
 101          byte move_forward_cmd(CMD_PACKET* cmd_packet)
 102          {
 103   1        int motor_speed = 20;
 104   1        
 105   1        if(cmd_packet->cmd_size > 1)
 106   1        {
 107   2          return 0;
 108   2        }
 109   1          
 110   1        cmd_packet->commands->Etat_Mouvement = Avancer;
 111   1      
 112   1        if(cmd_packet->cmd_size == 1)
 113   1        {
 114   2          // Si valeur non numérique
 115   2          if(sscanf((cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE)), "%d", &motor_speed) == 0)
 116   2          {
C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 3   

 117   3            return 0;
 118   3          }
 119   2          
 120   2          // Si pas dans l'intervalle de valeur acceptées
 121   2          if(motor_speed < 0 || motor_speed > 100)
 122   2          {
 123   3            return 0;
 124   3          }
 125   2          
 126   2          cmd_packet->commands->Vitesse = motor_speed;
 127   2        }else{
 128   2          if(cmd_packet->commands->Vitesse == 0)
 129   2          {
 130   3            cmd_packet->commands->Vitesse = motor_speed;
 131   3          }
 132   2        }
 133   1        return 1;
 134   1      }
 135          
 136          byte move_backward_cmd(CMD_PACKET* cmd_packet)
 137          {
 138   1        int motor_speed = 20;
 139   1        
 140   1        if(cmd_packet->cmd_size > 1)
 141   1        {
 142   2          return 0;
 143   2        }
 144   1          
 145   1        cmd_packet->commands->Etat_Mouvement = Reculer;
 146   1      
 147   1        if(cmd_packet->cmd_size == 1)
 148   1        {
 149   2          // Si valeur non numérique
 150   2          if(sscanf((cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE)), "%d", &motor_speed) == 0)
 151   2          {
 152   3            return 0;
 153   3          }
 154   2          
 155   2          // Si pas dans l'intervalle de valeur acceptées
 156   2          if(motor_speed < 0 || motor_speed > 100)
 157   2          {
 158   3            return 0;
 159   3          }
 160   2          
 161   2          cmd_packet->commands->Vitesse = motor_speed;
 162   2        }else{
 163   2          if(cmd_packet->commands->Vitesse == 0)
 164   2          {
 165   3            cmd_packet->commands->Vitesse = motor_speed;
 166   3          }
 167   2        }
 168   1        return 1;
 169   1      }
 170          
 171          byte move_stop_cmd(CMD_PACKET* cmd_packet)
 172          { 
 173   1        if(cmd_packet->cmd_size != 0)
 174   1        {
 175   2          return 0;
 176   2        }
 177   1        cmd_packet->commands->Etat_Mouvement = Stopper;
 178   1        return 1;
C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 4   

 179   1      }
 180          
 181          byte rigth_rotation_cmd(CMD_PACKET* cmd_packet)
 182          {
 183   1        if(cmd_packet->cmd_size != 0)
 184   1        {
 185   2          return 0;
 186   2        }
 187   1        
 188   1        cmd_packet->commands->Etat_Mouvement = Rot_90D;
 189   1        return 1;
 190   1      }
 191          
 192          byte left_rotation_cmd(CMD_PACKET* cmd_packet)
 193          {
 194   1        if(cmd_packet->cmd_size != 0)
 195   1        {
 196   2          return 0;
 197   2        }
 198   1        
 199   1        cmd_packet->commands->Etat_Mouvement = Rot_90G;
 200   1        return 1;
 201   1      }
 202          
 203          byte complete_rotation_cmd(CMD_PACKET* cmd_packet)
 204          {
 205   1        if(cmd_packet->cmd_size > 1)
 206   1        {
 207   2          return 0;
 208   2        }
 209   1      
 210   1        if(cmd_packet->cmd_size == 1)
 211   1        {
 212   2          
 213   2          if(strcmp((cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE)), "D") == 0 
 214   2            || strcmp((cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE)), "G") == 0)
 215   2          {
 216   3            switch( (*(cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE))) )
 217   3            {
 218   4              case 'D':
 219   4                cmd_packet->commands->Etat_Mouvement = Rot_180D;
 220   4                break;
 221   4              default :
 222   4                cmd_packet->commands->Etat_Mouvement = Rot_180G;
 223   4                break;
 224   4            }
 225   3          }else{
 226   3            return 0;
 227   3          }
 228   2      
 229   2        }else{
 230   2          cmd_packet->commands->Etat_Mouvement = Rot_180D;
 231   2        }
 232   1        return 1;
 233   1      }
 234          
 235          byte angle_rotation_cmd(CMD_PACKET* cmd_packet)
 236          {
 237   1        unsigned int angle = 0;
 238   1        
 239   1        if(cmd_packet->cmd_size != 2)
 240   1        {
C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 5   

 241   2          return 0;
 242   2        }
 243   1        
 244   1        if(strcmp((cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE)), "D") == 0 
 245   1            || strcmp((cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE)), "G") == 0)
 246   1        {
 247   2          switch( (*(cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE))) )
 248   2          {
 249   3            case 'D':
 250   3              cmd_packet->commands->Etat_Mouvement = Rot_AngD;
 251   3              break;
 252   3            default :
 253   3              cmd_packet->commands->Etat_Mouvement = Rot_AngG;
 254   3              break;
 255   3          }
 256   2          
 257   2          if(sscanf((cmd_packet->commands_data + (2 * ARGS_BUFFER_SIZE)), "%d", &angle) == 0)
 258   2          {
 259   3            return 0;
 260   3          }
 261   2          
 262   2          cmd_packet->commands->Angle = (int)(angle);
 263   2        }else{
 264   2          return 0;
 265   2        }
 266   1        return 1;
 267   1      }
 268          
 269          /*
 270            Move to (X,Y,alpha) coordinate
 271          
 272            Ex : "G X:10 Y:15 A:45"
 273          
 274            Function exclude from Data Overlaying in "linker_directives" : OVERLAY( * ! move_to_cmd )
 275          
 276          */
 277          byte move_to_cmd(CMD_PACKET* cmd_packet)
 278          {
 279   1        byte i = 0, j = 0;
 280   1        char params[3][5] = {"X", "Y", "A"};
 281   1        int angle = 0, x = 0, y = 0;
 282   1        byte param_find = 0;
 283   1        char * str = 0;
 284   1        
 285   1        
 286   1        // Not enougthl args
 287   1        if(cmd_packet->cmd_size != 6)
 288   1        {
 289   2          return 0;
 290   2        }
 291   1        
 292   1        // Analyse each param:value couple
 293   1        for(i = 0 ; i < 3 ; ++i)
 294   1        {
 295   2          str = (cmd_packet->commands_data + ( ((2*i) + 1) * ARGS_BUFFER_SIZE));
 296   2          
 297   2          // For one couple, identify the param
 298   2          for(j = 0 ; j < 3 ; j++)
 299   2          {
 300   3            if( strcmp(str, params[j]) == 0 )
 301   3            {
 302   4              switch(j)
C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 6   

 303   4              {
 304   5                case 0:
 305   5                  if(sscanf((cmd_packet->commands_data + ((2 + i * 2) * ARGS_BUFFER_SIZE)), "%d", &x) == 0)
 306   5                  {
 307   6                    return 0;
 308   6                  }       
 309   5                  break;
 310   5                
 311   5                case 1:
 312   5                  if(sscanf((cmd_packet->commands_data + ((2 + i * 2) * ARGS_BUFFER_SIZE)), "%d", &y) == 0)
 313   5                  {
 314   6                    return 0;
 315   6                  }   
 316   5                  break;
 317   5                
 318   5                case 2:
 319   5                  if(sscanf((cmd_packet->commands_data + ((2 + i * 2) * ARGS_BUFFER_SIZE)), "%d", &angle) == 0)
 320   5                  {
 321   6                    return 0;
 322   6                  } 
 323   5                  break;
 324   5                
 325   5              }
 326   4              param_find = 1;
 327   4              break;
 328   4            }
 329   3          }
 330   2          
 331   2          if(param_find == 0)
 332   2          {
 333   3            return 0;
 334   3          }else{
 335   3            param_find = 0;
 336   3          }
 337   2          
 338   2        }
 339   1        
 340   1        cmd_packet->commands->Angle = angle;
 341   1        cmd_packet->commands->Coord_X = (byte)x;
 342   1        cmd_packet->commands->Coord_Y = (byte)y;
 343   1        cmd_packet->commands->Etat_Mouvement = Depl_Coord;
 344   1        return 1;
 345   1      }
 346          
 347          byte detecte_obstacle(CMD_PACKET* cmd_packet)
 348          {
 349   1        if(cmd_packet->cmd_size != 0)
 350   1        {
 351   2          return 0;
 352   2        }
 353   1        
 354   1        cmd_packet->commands->Etat_DCT_Obst = oui_single;
 355   1        return 1;
 356   1      }
 357          
 358          byte servo_move_cmd(CMD_PACKET* cmd_packet)
 359          {
 360   1        int angle = 45;
 361   1        
 362   1        if(cmd_packet->cmd_size > 3)
 363   1        {
 364   2          return 0;
C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 7   

 365   2        }
 366   1        
 367   1        if(strcmp((cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE)), "H") == 0 
 368   1          || strcmp((cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE)), "V") == 0)
 369   1        {
 370   2          switch( (*(cmd_packet->commands_data + (1 * ARGS_BUFFER_SIZE))) )
 371   2          {
 372   3            case 'V':
 373   3              cmd_packet->commands->Etat_Servo = Servo_V;
 374   3              break;
 375   3            default :
 376   3              cmd_packet->commands->Etat_Servo = Servo_H;
 377   3              break;
 378   3          }
 379   2          
 380   2        }
 381   1        
 382   1        if(strcmp((cmd_packet->commands_data + (2 * ARGS_BUFFER_SIZE)), "A") == 0 )
 383   1        {
 384   2          if(sscanf((cmd_packet->commands_data + (3 * ARGS_BUFFER_SIZE)), "%d", &angle) == 0)
 385   2          {
 386   3            return 0;
 387   3          }
 388   2        
 389   2          cmd_packet->commands->Servo_Angle = (char)(angle);
 390   2        }
 391   1        
 392   1        return 1;
 393   1      }
 394          
 395          byte light_beam_ON_cmd(CMD_PACKET* cmd_packet)
 396          {
 397   1        byte i = 0, j = 0;
 398   1        char params[4][5] = {"I", "D", "E", "N"};
 399   1        int intensity = 100, delay_on = 99, delay_off = 0, nbr_flash = 1;
 400   1        byte param_find = 0;
 401   1        char * str = 0;
 402   1        
 403   1        // To much args
 404   1        if(cmd_packet->cmd_size > 8 || (cmd_packet->cmd_size % 2) != 0)
 405   1        {
 406   2          return 0;
 407   2        }
 408   1        
 409   1        // Analyse each param:value couple
 410   1        for(i = 0 ; i < (cmd_packet->cmd_size/2) ; ++i)
 411   1        {
 412   2          str = (cmd_packet->commands_data + ( ((2*i) + 1) * ARGS_BUFFER_SIZE));
 413   2          
 414   2          // For one couple, identify the param
 415   2          for(j = 0 ; j < 4 ; j++)
 416   2          {
 417   3            if( strcmp(str, params[j]) == 0 )
 418   3            {
 419   4              switch(j)
 420   4              {
 421   5                case 0:
 422   5                  if(sscanf((cmd_packet->commands_data + ((2 + i * 2) * ARGS_BUFFER_SIZE)), "%d", &intensity) == 0)
 423   5                  {
 424   6                    return 0;
 425   6                  }
 426   5                  else
C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 8   

 427   5                  {
 428   6                    // Si pas dans l'intervalle de valeur acceptées
 429   6                    if(intensity < 1 || intensity > 100)
 430   6                    {
 431   7                      return 0;
 432   7                    }
 433   6                  }
 434   5                  break;
 435   5                
 436   5                case 1:
 437   5                  if(sscanf((cmd_packet->commands_data + ((2 + i * 2) * ARGS_BUFFER_SIZE)), "%d", &delay_on) == 0)
 438   5                  {
 439   6                    return 0;
 440   6                  } 
 441   5                  else
 442   5                  {
 443   6                    // Si pas dans l'intervalle de valeur acceptées
 444   6                    if(delay_on < 1 || delay_on > 99)
 445   6                    {
 446   7                      return 0;
 447   7                    }
 448   6                  }           
 449   5                  break;
 450   5                
 451   5                case 2:
 452   5                  if(sscanf((cmd_packet->commands_data + ((2 + i * 2) * ARGS_BUFFER_SIZE)), "%d", &delay_off) == 0)
 453   5                  {
 454   6                    return 0;
 455   6                  } 
 456   5                  else
 457   5                  {
 458   6                    // Si pas dans l'intervalle de valeur acceptées
 459   6                    if(delay_off < 0 || delay_off > 99)
 460   6                    {
 461   7                      return 0;
 462   7                    }
 463   6                  }   
 464   5                  break;
 465   5                  
 466   5                case 3:
 467   5                  if(sscanf((cmd_packet->commands_data + ((2 + i * 2) * ARGS_BUFFER_SIZE)), "%d", &nbr_flash) == 0)
 468   5                  {
 469   6                    return 0;
 470   6                  } 
 471   5                  else
 472   5                  {
 473   6                    // Si pas dans l'intervalle de valeur acceptées
 474   6                    if(nbr_flash < 1 || nbr_flash > 99)
 475   6                    {
 476   7                      return 0;
 477   7                    }
 478   6                  } 
 479   5                  break;
 480   5              }
 481   4              param_find = 1;
 482   4              break;
 483   4            }
 484   3          }
 485   2          
 486   2          if(param_find == 0)
 487   2          {
 488   3            return 0;
C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 9   

 489   3          }else{
 490   3            param_find = 0;
 491   3          }
 492   2          
 493   2        }
 494   1        
 495   1        cmd_packet->commands->Etat_Lumiere = Allumer;
 496   1        cmd_packet->commands->Lumiere_Intensite = intensity;
 497   1        cmd_packet->commands->Lumiere_Duree = delay_on;
 498   1        cmd_packet->commands->Lumire_Extinction = delay_off;
 499   1        cmd_packet->commands->Lumiere_Nbre = nbr_flash;
 500   1        
 501   1        return 1;
 502   1      }
 503          
 504          byte light_beam_OFF_cmd(CMD_PACKET* cmd_packet)
 505          {
 506   1        // To much args
 507   1        if(cmd_packet->cmd_size != 0)
 508   1        {
 509   2          return 0;
 510   2        }
 511   1      
 512   1        cmd_packet->commands->Etat_Lumiere = Eteindre;
 513   1      
 514   1        return 1;
 515   1      }
 516          
 517          byte generate_sound_cmd(CMD_PACKET* cmd_packet)
 518          {
 519   1          byte i = 0, j = 0;
 520   1        char params[4][5] = {"F", "P", "W", "B"};
 521   1        int frequency_code = 100, delay_son = 25, delay_silence = 50, nbr_bip = 3;
 522   1        byte param_find = 0;
 523   1        char * str = 0;
 524   1        
 525   1        // To much args
 526   1        if(cmd_packet->cmd_size > 8 || (cmd_packet->cmd_size % 2) != 0)
 527   1        {
 528   2          return 0;
 529   2        }
 530   1        
 531   1        // Analyse each param:value couple
 532   1        for(i = 0 ; i < (cmd_packet->cmd_size/2) ; ++i)
 533   1        {
 534   2          str = (cmd_packet->commands_data + ( ((2*i) + 1) * ARGS_BUFFER_SIZE));
 535   2          
 536   2          // For one couple, identify the param
 537   2          for(j = 0 ; j < 4 ; j++)
 538   2          {
 539   3            if( strcmp(str, params[j]) == 0 )
 540   3            {
 541   4              switch(j)
 542   4              {
 543   5                case 0:
 544   5                  if(sscanf((cmd_packet->commands_data + ((2 + i * 2) * ARGS_BUFFER_SIZE)), "%d", &frequency_code) == 
             -0)
 545   5                  {
 546   6                    return 0;
 547   6                  }
 548   5                  else
 549   5                  {
C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 10  

 550   6                    // Si pas dans l'intervalle de valeur acceptées
 551   6                    if(frequency_code < 1 || frequency_code > 99)
 552   6                    {
 553   7                      return 0;
 554   7                    }
 555   6                  }
 556   5                  break;
 557   5                
 558   5                case 1:
 559   5                  if(sscanf((cmd_packet->commands_data + ((2 + i * 2) * ARGS_BUFFER_SIZE)), "%d", &delay_son) == 0)
 560   5                  {
 561   6                    return 0;
 562   6                  } 
 563   5                  else
 564   5                  {
 565   6                    // Si pas dans l'intervalle de valeur acceptées
 566   6                    if(delay_son < 1 || delay_son > 99)
 567   6                    {
 568   7                      return 0;
 569   7                    }
 570   6                  }           
 571   5                  break;
 572   5                
 573   5                case 2:
 574   5                  if(sscanf((cmd_packet->commands_data + ((2 + i * 2) * ARGS_BUFFER_SIZE)), "%d", &delay_silence) == 0
             -)
 575   5                  {
 576   6                    return 0;
 577   6                  } 
 578   5                  else
 579   5                  {
 580   6                    // Si pas dans l'intervalle de valeur acceptées
 581   6                    if(delay_silence < 1 || delay_silence > 99)
 582   6                    {
 583   7                      return 0;
 584   7                    }
 585   6                  }   
 586   5                  break;
 587   5                  
 588   5                case 3:
 589   5                  if(sscanf((cmd_packet->commands_data + ((2 + i * 2) * ARGS_BUFFER_SIZE)), "%d", &nbr_bip) == 0)
 590   5                  {
 591   6                    return 0;
 592   6                  } 
 593   5                  else
 594   5                  {
 595   6                    // Si pas dans l'intervalle de valeur acceptées
 596   6                    if(nbr_bip < 1 || nbr_bip > 99)
 597   6                    {
 598   7                      return 0;
 599   7                    }
 600   6                  } 
 601   5                  break;
 602   5              }
 603   4              param_find = 1;
 604   4              break;
 605   4            }
 606   3          }
 607   2          
 608   2          if(param_find == 0)
 609   2          {
 610   3            return 0;
C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 11  

 611   3          }else{
 612   3            param_find = 0;
 613   3          }
 614   2          
 615   2        }
 616   1        
 617   1        cmd_packet->commands->Etat_GEN_Son = GEN_oui;
 618   1        cmd_packet->commands->GEN_freq_code = frequency_code;
 619   1        cmd_packet->commands->GEN_son_Duree = delay_son;
 620   1        cmd_packet->commands->GEN_silence_Duree = delay_silence;
 621   1        cmd_packet->commands->GEN_nbr_bip = nbr_bip;
 622   1        
 623   1        return 1;
 624   1        
 625   1      }
 626          
 627          byte photo_cmd(CMD_PACKET* cmd_packet)
 628          {
 629   1        byte i = 1, j = 0;
 630   1        char params[5][3] = {"E", "N", "O", "C", "S"};
 631   1        int duree_photo = 1, nbr_photo = 1, mode = 1;
 632   1        byte param_find = 0;
 633   1        char * str = 0;
 634   1        
 635   1        
 636   1        // To much args
 637   1        if(cmd_packet->cmd_size > 5)
 638   1        {
 639   2          return 0;
 640   2        }
 641   1          
 642   1        
 643   1        // Analyse each param:value couple
 644   1        while(i <= cmd_packet->cmd_size)
 645   1        {
 646   2          str = (cmd_packet->commands_data + ( i * ARGS_BUFFER_SIZE));
 647   2          
 648   2          // For one couple, identify the param
 649   2          for(j = 0 ; j < 5 ; j++)
 650   2          {
 651   3            if( strcmp(str, params[j]) == 0 )
 652   3            {
 653   4              switch(j)
 654   4              {
 655   5                case 0:
 656   5                  if(sscanf((cmd_packet->commands_data + ( (i+1) * ARGS_BUFFER_SIZE) ), "%d", &duree_photo) == 0)
 657   5                  {
 658   6                    return 0;
 659   6                  }   
 660   5                  i += 2;
 661   5                  break;
 662   5                
 663   5                case 1:
 664   5                  if(sscanf((cmd_packet->commands_data + ( (i+1) * ARGS_BUFFER_SIZE) ), "%d", &nbr_photo) == 0)
 665   5                  {
 666   6                    return 0;
 667   6                  }
 668   5                  i += 2;
 669   5                  break;
 670   5                case 2:
 671   5                  mode = 1;
 672   5                  i++;
C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 12  

 673   5                  break;
 674   5                case 3:
 675   5                  mode = 2;
 676   5                  i++;
 677   5                  break;
 678   5                case 4:
 679   5                  mode = 3;
 680   5                  i++;
 681   5                  break;
 682   5              }
 683   4              param_find = 1;
 684   4              break;
 685   4            }
 686   3          }
 687   2          
 688   2          if(param_find == 0)
 689   2          {
 690   3            return 0;
 691   3          }else{
 692   3            param_find = 0;
 693   3          }
 694   2          
 695   2        }
 696   1        
 697   1        cmd_packet->commands->Photo_Duree = (byte)duree_photo;
 698   1        cmd_packet->commands->Photo_Nbre = (byte)nbr_photo;
 699   1        ( cmd_packet->commands->Etat_Photo =  (mode == 1) ? Photo_1 : ( (mode == 2) ? Photo_Multiple : Photo_cont
             -inue) );
 700   1        return 1;
 701   1      }
 702          
 703          byte photo_OFF_cmd(CMD_PACKET* cmd_packet)
 704          {
 705   1        // To much args
 706   1        if(cmd_packet->cmd_size != 0)
 707   1        {
 708   2          return 0;
 709   2        }
 710   1      
 711   1        cmd_packet->commands->Etat_Photo = Photo_stop;
 712   1      
 713   1        return 1;
 714   1      }
 715          
 716          byte aux_cmd(CMD_PACKET* cmd_packet)
 717          {
 718   1        byte * str = 0;
 719   1        char params[4][3] = {"A", "B", "S", "L"};
 720   1        int ticks_value = 0;
 721   1        
 722   1        str = (cmd_packet->commands_data + ( 1 * ARGS_BUFFER_SIZE));
 723   1        
 724   1        // Command A [Tick] to rotate from [Tick] number of ticks 
 725   1        if( strcmp(str, params[0]) == 0 )
 726   1        {
 727   2          if(sscanf((cmd_packet->commands_data + ( 2 * ARGS_BUFFER_SIZE)), "%d", &ticks_value) == 0)
 728   2          {
 729   3            return 0;
 730   3          }
 731   2          cmd_packet->commands->Etat_Mouvement = Avancer;
 732   2          cmd_packet->commands->Pos_Angle = ticks_value;
 733   2          return 1;
C51 COMPILER V9.55   COMMANDS                                                              04/28/2019 16:27:09 PAGE 13  

 734   2        }
 735   1        
 736   1        // Command B to get back from last calibration position
 737   1        else if( strcmp(str, params[1]) == 0 )
 738   1        {
 739   2          cmd_packet->commands->Etat_Mouvement = Reculer;
 740   2          return 1;
 741   2        }
 742   1        
 743   1        // Command S to save last tick value and start new one
 744   1        else if( strcmp(str, params[2]) == 0 )
 745   1        {
 746   2          cmd_packet->commands->Etat_Mouvement = Stopper;
 747   2          return 1;
 748   2        }
 749   1        
 750   1        // Command to plot ALL ticks _data
 751   1        else if (strcmp(str, params[3]) == 0)
 752   1        {
 753   2          cmd_packet->commands->Etat_Mouvement = Depl_Coord;
 754   2          return 1;
 755   2        }
 756   1        
 757   1        return 0;
 758   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   7372    ----
   CONSTANT SIZE    =     98    ----
   XDATA SIZE       =   ----     214
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

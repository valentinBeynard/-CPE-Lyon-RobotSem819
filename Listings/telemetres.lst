C51 COMPILER V9.55   TELEMETRES                                                            03/12/2019 12:31:42 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE TELEMETRES
OBJECT MODULE PLACED IN .\Objects\telemetres.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\telemetres.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT
                    -(.\Listings\telemetres.lst) TABS(2) OBJECT(.\Objects\telemetres.obj)

line level    source

   1          // Target: C8051F02x
   2          // Tool chain: KEIL Microvision 4
   3          //
   4          //
   5          //------------------------------------------------------------------------------------
   6          #include "c8051F020.h"
   7          
   8          #define POW 4096.0
   9          
  10          
  11          sbit sig = P1^1;
  12          sfr16 ADC0 = 0xbe;
  13          
  14          
  15          //configuration du watchdog
  16          void config_watchdog()
  17          {
  18   1        WDTCN = 0xDE;   // Dévalidation du watchdog 
  19   1        WDTCN = 0xAD;
  20   1      }
  21          
  22          
  23          // Configuration du crossbar
  24          void config_XBAR()
  25          {
  26   1        /* Le crossbar permet d'activer les ports entrées/sorties du C8051F020. 
  27   1        C'est une fonction de configuration des ports entrées/sorties de la carte du microcontroleur. 
  28   1        Pas d'arguments ni en entrée ni en sortie. */
  29   1        
  30   1        XBR0 = 0x04;
  31   1        XBR1 = 0x80;
  32   1        XBR2 = 0x40;
  33   1      
  34   1      }
  35          
  36          
  37          // Configuration de l'horloge 
  38          void sysclk()
  39          {
  40   1        /* L'horloge permet de synchroniser le système à une fréquence de 22 MHz
  41   1        Le rôle de cette fonction est de créer une horloge.
  42   1        C'est une fonction de configuration du système d'horloge du microcontroleur. 
  43   1        Pas de paramètres d'entrée ou de sortie.
  44   1        Pour tester, on configure l'horloge sur un port 
  45   1        puis on branche une sonde sur ce port et on observe le résultat sur l'oscilloscope.*/
  46   1        
  47   1        unsigned int i;
  48   1        OSCXCN |= 0x67; 
  49   1        OSCXCN = OSCXCN & ~0x10; //On met à 0 le bit 4
  50   1        for(i=0;i<1000;i++); //On temporise pour atteindre la stabilité
  51   1        
  52   1        OSCICN |= 0x08; // Mise à 1 du bit 3
  53   1        
  54   1        
C51 COMPILER V9.55   TELEMETRES                                                            03/12/2019 12:31:42 PAGE 2   

  55   1      }
  56          
  57          
  58          void config_ADC() {
  59   1      /* -role: cette fonction permet de configurer le convertisseur ADC
  60   1         -fonction de configuration du convertisseur.
  61   1         -arguments d'entree: none.
  62   1         -argument de sortie: none.
  63   1      */
  64   1        ADC0CN |=0x81;
  65   1        ADC0CN &= ~0x4C;
  66   1        ADC0CF &= 0x00;
  67   1      
  68   1        REF0CN&=0xEB;
  69   1        REF0CN|=0x03;
  70   1        
  71   1        DAC0CN |=0x80;
  72   1        DAC0CN &=0xE0;
  73   1      }
  74          
  75          
  76          float mesure(){
  77   1      /* -role: cette fonction permet de mesurer la distance entre le servomoteur et l'obstacle.
  78   1         -fonction d'utilisation.
  79   1         -arguments d'entree: none.
  80   1         -argument de sortie: distance.
  81   1      */  
  82   1        float d;
  83   1        float V_mes;
  84   1        
  85   1        //lecture de la tension mesurée sur AIN2
  86   1        AMX0SL&=0x00;
  87   1        AMX0SL|=0x02;
  88   1        V_mes=ADC0/(POW*5.6);
  89   1        
  90   1        //Calcul des distances
  91   1        d=-16.669*V_mes+67.367; //équation tiré de l'étalonnage
  92   1      
  93   1        return d;
  94   1        
  95   1      }
  96          
  97          
  98          void init(){
  99   1        config_watchdog();
 100   1        config_XBAR();
 101   1        sysclk();
 102   1        config_ADC();
 103   1      }
 104          
 105          #ifdef UNITY_TELEMETER
              
              void main()
              {
                init();
                while(1){
                  AD0INT=0;
                  AD0BUSY=1;
                  mesure();
                  AD0BUSY=0;
                }
                
C51 COMPILER V9.55   TELEMETRES                                                            03/12/2019 12:31:42 PAGE 3   

              }
              
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    143    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

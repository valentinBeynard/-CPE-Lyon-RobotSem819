C51 COMPILER V9.55   MAIN                                                                  03/17/2019 18:14:07 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\main.c LARGE OPTIMIZE(2,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "debug.h"
   2          #include "commands_parser.h"
   3          #include "serializer.h"
   4          
   5          sfr Reg = 0xFF;
   6          
   7          void Init_External_clk()
   8          {
   9   1        // Config External Osci
  10   1        OSCXCN = 0x67;
  11   1        while(OSCXCN != 0xE7) {}
  12   1        
  13   1        // Use Exern CLK
  14   1        OSCICN = 0x08;
  15   1      }
  16          
  17          void Init_Crossbar()
  18          {
  19   1        // Init UART0 on Crossbar
  20   1        XBR0 = 0x04;
  21   1        
  22   1        // Init UART1 on Crossbar
  23   1        XBR2 |= 0x04;
  24   1        
  25   1        // Push Pull mode
  26   1        P0MDOUT = 0xFF;
  27   1        
  28   1        // Enable Crossbar
  29   1        XBR2 |= 0x40;
  30   1      }
  31          
  32          
  33          #ifdef ROBOT
  34          
  35          int main (void)
  36          {
  37   1        
  38   1        OUT_M1 commands = {Epreuve_non, // Numéro Epreuve
  39   1                            Mouvement_non,  // Etat mouvement
  40   1                            0,  //  Vitesse
  41   1                            0,  // Coord_X
  42   1                            0,  // Coord_Y
  43   1                            0,  // Angle
  44   1                            ACQ_non,  // Commande d'acquisition du son
  45   1                            0,  // Durée d'acquisition
  46   1                            DCT_non,  // Commande de détection d'obstacle
  47   1                            0,  // Résolution angulaire de la détection d'obstacle
  48   1                            Lumiere_non,  // Commande d'allumage du pointeur lumineux
  49   1                            0,  //Intensitée lumineuse
  50   1                            0,  // Durée d'allumage
  51   1                            0,  // Durée d'extinction
  52   1                            0,  // Nombre de cycles d'allumage
  53   1                            Servo_non,  // Commande de position du servo
  54   1                            0,  // Paramètre angle
C51 COMPILER V9.55   MAIN                                                                  03/17/2019 18:14:07 PAGE 2   

  55   1                            Energie_non,  // Commande relevée courant
  56   1                            Position_non, // Commande de gestion de position
  57   1                            0,  // Coord X de position
  58   1                            0,  // Coord Y de position
  59   1                            0,  // Angle
  60   1                            Photo_non,  // Commande de prise de phot
  61   1                            0,  // Temps entre deux photo
  62   1                            0 // Nbr de photo
  63   1                            };
  64   1      
  65   1        PARSER_RESULT parser_result = {1 , &commands};
  66   1        
  67   1        
  68   1        Reg = 0xDE;   // Dévalidation du watchdog 
  69   1        Reg = 0xAD;
  70   1        
  71   1        // µP candencé sur clk extern à 22 MHz           
  72   1        Init_External_clk();
  73   1        
  74   1        // Initialise l'UART0 et le Timer 2 pour le parser de commandes       
  75   1        init_parser();
  76   1          
  77   1        // Initialise l'UART1 utilisé pour communiquer avec le sérializer
  78   1        init_serializer_UART1();
  79   1                    
  80   1        Init_Crossbar();
  81   1      
  82   1        USART_print("Start Routine \n\n");
  83   1        USART_print("Waiting for Serializer Init Processing... \n\n");
  84   1                
  85   1        serializer_init_serial();
  86   1                    
  87   1        USART_print("\n\n#############################\n\n>");
  88   1      
  89   1        //serializer_print("mogo 1:50 2:50");
  90   1                  
  91   1        while(1)
  92   1        {
  93   2          
  94   2          //parser_process(state, &parser_result);
  95   2          cmd_parser_process(&parser_result);
  96   2          
  97   2          if( parser_result.commands.Etat_Epreuve == Stop_Urgence)
  98   2          {
  99   3            USART_print("Quit");
 100   3            break;
 101   3          }
 102   2          
 103   2          if( parser_result.commands.Etat_Epreuve == epreuve1)
 104   2          {
 105   3            //USART_print("Epreuve 1 !");
 106   3            serializer_process(&(parser_result.commands));
 107   3          }
 108   2          else{
 109   3            parser_result.commands.Etat_Mouvement = Mouvement_non;
 110   3          }
 111   2          
 112   2          //serializer_send('H');
 113   2          //USART_send('A');
 114   2          //printf("Commande lu : %u", (int)(parser_result.commands->Etat_Epreuve));
 115   2        
 116   2          
C51 COMPILER V9.55   MAIN                                                                  03/17/2019 18:14:07 PAGE 3   

 117   2          //serializer_print("mogo 1:50 2:50\r");
 118   2          
 119   2        }
 120   1        
 121   1        USART_print("Fin Soft");
 122   1        
 123   1        while(1);
 124   1      }
 125          
 126          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    215    ----
   CONSTANT SIZE    =    166    ----
   XDATA SIZE       =   ----      55
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

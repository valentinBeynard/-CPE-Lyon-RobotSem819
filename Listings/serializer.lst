C51 COMPILER V9.52.0.0   SERIALIZER                                                        03/14/2019 17:26:16 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SERIALIZER
OBJECT MODULE PLACED IN .\Objects\serializer.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE src\serializer.c LARGE OPTIMIZE(2,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\serializer.lst) TABS(2) OBJECT(.\Objects\serializer.obj)

line level    source

   1          #include "serializer.h"
   2          #include <string.h>
   3          #include <stdio.h>
   4          
   5          const SERIALIZER_FSM_PROCESS serializer_state_machine[4] = {
   6              {IDLE, NULL},
   7              {TRANSLATE, NULL},
   8              {ROTATE, NULL},
   9              {NAVIGATE, NULL}
  10          };
  11          
  12          /* Etat courant de la machine d'Etat */
  13          SERIALIZER_STATE serializer_state = IDLE;
  14          
  15          byte is_processing = 0;
  16          
  17          /*
  18          #############################################################################
  19                  UART1 related function for µP 8051F020
  20          #############################################################################
  21          */
  22          
  23          /**
  24            8051 µP :
  25            Initialize devices for commands_parser : UART0 and Timer 2
  26          **/
  27          byte init_serializer_UART1()
  28          {
  29   1        
  30   1        /****** INIT UART1 *****/
  31   1        SCON1 = 0x50;
  32   1        
  33   1        // Réglage timer 4
  34   1        T4CON = 0x3D; // Baud Generator for UART1 + Enable TR4
  35   1        
  36   1        RCAP4L = 0xDC;  // Reload value for BaudRate 19200
  37   1        RCAP4H = 0xFF;
  38   1        
  39   1        return 0;
  40   1      }
  41          
  42          void serializer_receive(byte* read_byte)
  43          {
  44   1        if( (SCON1 & 0x01) == 1)
  45   1        {
  46   2          *read_byte = SBUF1;
  47   2          SCON1 &= 0xFE;  // Remise à 0 de RI1
  48   2        }else{
  49   2          *read_byte = '*';
  50   2        }
  51   1      }
  52          
  53          void serializer_send(byte ch)
  54          {
C51 COMPILER V9.52.0.0   SERIALIZER                                                        03/14/2019 17:26:16 PAGE 2   

  55   1        SBUF1 = ch;
  56   1        while( (SCON1 & 0x02) == 0){} // Tant que TI1 == 0
  57   1        SCON1 &= 0xFD;  // Remise à 0 de TI1
  58   1      }
  59          
  60          void UART_send(byte ch)
  61          {
  62   1        SBUF0 = ch;
  63   1        while(TI0 == 0){}
  64   1        TI0 = 0;
  65   1      }
  66          
  67          void serializer_print(char* str)
  68          {
  69   1        byte i = 0;
  70   1        for(i = 0 ; i < strlen(str); i++)
  71   1        {
  72   2          UART_send(*(str+i));
  73   2          serializer_send(*(str+i));
  74   2        }
  75   1        
  76   1        serializer_send(0x0D);
  77   1      }
  78          
  79          void serializer_init_serial()
  80          {
  81   1        char c = 0;
  82   1        do
  83   1        {
  84   2          serializer_receive(&c);
  85   2          UART_send(c);
  86   2        }while(c != END_RSLT_BYTE);
  87   1        
  88   1      }
  89          
  90          void serializer_clear_serial()
  91          {
  92   1        char c = 0;
  93   1        //UART_send('!');
  94   1        do
  95   1        {
  96   2          serializer_receive(&c);
  97   2          UART_send(c);
  98   2        }while(c != END_RSLT_BYTE && c != '*');
  99   1        
 100   1      }
 101          
 102          /*
 103          #############################################################################
 104                  Serializer related functions
 105          #############################################################################
 106          */
 107          
 108          void serializer_process(OUT_M1* cmd)
 109          {
 110   1        PTS_2DA pts = {1, 0, 0, 0};
 111   1        
 112   1        if(cmd->Etat_Mouvement != Mouvement_non)
 113   1        {
 114   2          if(serializer_state != IDLE)
 115   2          {
 116   3            // TO DO
C51 COMPILER V9.52.0.0   SERIALIZER                                                        03/14/2019 17:26:16 PAGE 3   

 117   3          }else{
 118   3            
 119   3            pts.speed = cmd->Vitesse;
 120   3            
 121   3            switch(cmd->Etat_Mouvement)
 122   3            {
 123   4              case Avancer:
 124   4                serializer_state = TRANSLATE;
 125   4                cmd->Etat_Mouvement = Mouvement_non;
 126   4                break;
 127   4              
 128   4              case Reculer:
 129   4                serializer_state = TRANSLATE;
 130   4                cmd->Etat_Mouvement = Mouvement_non;
 131   4                break;
 132   4              
 133   4              case Stopper:
 134   4                serializer_state = IDLE;
 135   4                cmd->Etat_Mouvement = Mouvement_non;
 136   4                break;
 137   4      
 138   4              case Rot_90D:
 139   4                serializer_state = ROTATE;
 140   4                cmd->Etat_Mouvement = Mouvement_non;
 141   4                break;
 142   4              
 143   4              case Rot_90G:
 144   4                serializer_state = ROTATE;
 145   4                cmd->Etat_Mouvement = Mouvement_non;
 146   4                break;
 147   4              
 148   4              case Rot_180D:
 149   4                serializer_state = ROTATE;
 150   4                cmd->Etat_Mouvement = Mouvement_non;
 151   4                break;
 152   4              
 153   4              case Rot_180G:
 154   4                serializer_state = ROTATE;
 155   4                cmd->Etat_Mouvement = Mouvement_non;
 156   4                break;
 157   4      
 158   4              case Rot_AngD:
 159   4                serializer_state = ROTATE;
 160   4                cmd->Etat_Mouvement = Mouvement_non;
 161   4                break;
 162   4      
 163   4              case Rot_AngG:
 164   4                serializer_state = ROTATE;
 165   4                cmd->Etat_Mouvement = Mouvement_non;
 166   4                break;
 167   4            }
 168   3              //serializer_state_machine[serializer_state].state_process(&pts);
 169   3            
 170   3            if(serializer_state == TRANSLATE)
 171   3            {       
 172   4              translate(&pts);
 173   4              serializer_state = IDLE;
 174   4            }
 175   3            else//(serializer_state = ROTATE)
 176   3            {
 177   4              rotate(&pts);
 178   4            }
C51 COMPILER V9.52.0.0   SERIALIZER                                                        03/14/2019 17:26:16 PAGE 4   

 179   3          }
 180   2          
 181   2        }else{
 182   2          serializer_state = IDLE;
 183   2        }
 184   1        
 185   1        
 186   1        
 187   1      }
 188          
 189          byte translate(PTS_2DA* pts)
 190          {
 191   1        char speed = 10;
 192   1        
 193   1        if(pts->speed != 0)
 194   1        {
 195   2          speed = pts->speed;
 196   2        }
 197   1        
 198   1        setMotors(pts->x * speed, pts->x * speed);
 199   1        
 200   1      }
*** WARNING C173 IN LINE 200 OF src\serializer.c: missing return-expression
 201          
 202          byte rotate(PTS_2DA* pts)
 203          {
 204   1        //static int angle_consigne = 0;
 205   1        char speed = TURN_SPEED;
 206   1        char sens = 0;
 207   1        
 208   1        if(is_processing)
 209   1        {
 210   2          // ANGLE CALCULATION : TO DO
 211   2          /*if()
 212   2          {
 213   2            
 214   2          }*/
 215   2        }
 216   1        else{
 217   2          sens = (pts->angle >= 0 ? 1 : -1 );
 218   2          setMotors((-1) * sens * speed, sens * speed);
 219   2        }
 220   1      }
*** WARNING C173 IN LINE 220 OF src\serializer.c: missing return-expression
 221          
 222          void setMotors(int mtr_speed_1, int mtr_speed_2)
 223          {
 224   1        char cmd[MOGO_CMD_SIZE] = "mogo 1:";
 225   1        
 226   1        //sprintf(cmd, "mogo 1:%u 2:%u\n", mtr_speed_1, mtr_speed_2);
 227   1      
 228   1        serializer_print("mogo 1:50 2:50");
 229   1        //serializer_print(cmd);
 230   1        
 231   1        serializer_clear_serial();
 232   1      }
*** WARNING C280 IN LINE 222 OF src\serializer.c: 'mtr_speed_1': unreferenced local variable
*** WARNING C280 IN LINE 222 OF src\serializer.c: 'mtr_speed_2': unreferenced local variable
 233          
 234          void stopMotors()
 235          {
 236   1        serializer_print("stop\n");
C51 COMPILER V9.52.0.0   SERIALIZER                                                        03/14/2019 17:26:16 PAGE 5   

 237   1        serializer_clear_serial();
 238   1      }
 239          
 240          int getRawEncoders(ENCODER_ID encoder_id)
 241          {
 242   1        int enc_value = 0;
 243   1        char result[ENC_RSLT_SIZE];
 244   1        char c = 0;
 245   1        byte ptr = 0;
 246   1        
 247   1        if(encoder_id == LEFT)
 248   1        {
 249   2          serializer_print("getenc 1\n");
 250   2        }
 251   1        else{
 252   2          serializer_print("getenc 2\n");
 253   2        }
 254   1        
 255   1        do
 256   1        {
 257   2          serializer_receive(&c);
 258   2          result[ptr] = c;
 259   2          ptr++;
 260   2        }while(c != END_RSLT_BYTE);
 261   1        
 262   1        sscanf(result, "%d", &enc_value);
 263   1        
 264   1        return enc_value;
 265   1      }
 266          
 267          int getEncoderDistance(ENCODER_ID encoder_id)
 268          {
 269   1        int enc_value = 0;
 270   1        
 271   1        enc_value = getRawEncoders(encoder_id);
 272   1        
 273   1        return ENC_2_MM(enc_value);
 274   1      }
 275          
 276          int getEncorderAngle()
 277          {
 278   1        
 279   1      }
*** WARNING C290 IN LINE 200 OF src\serializer.c: missing return value
*** WARNING C290 IN LINE 220 OF src\serializer.c: missing return value
*** WARNING C290 IN LINE 279 OF src\serializer.c: missing return value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1379    ----
   CONSTANT SIZE    =     71    ----
   XDATA SIZE       =     18      72
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)

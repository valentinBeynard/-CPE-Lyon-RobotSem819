C51 COMPILER V9.55   COMMANDS_PARSER                                                       03/11/2019 11:47:55 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE COMMANDS_PARSER
OBJECT MODULE PLACED IN .\Objects\commands_parser.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\commands_parser.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\commands_parser.lst) TABS(2) OBJECT(.\Objects\commands_parser.obj)

line level    source

   1          #include "commands_parser.h"
   2          #include <string.h>
   3          //#include <stdlib.h>
   4          
   5          /*
   6              DISPATCH TABLE
   7          
   8              Tableau regroupant commande et fonction associée
   9              On utilise un tablleau de structure CMD_ afin de référencer toutes les
  10              commandes implémentées et les lier à une fonctionnalitée.
  11          */
  12          const CMD_ dispatch_table [NUMBER_OF_COMMAND] = {
  13              /*{"Nom de la Commande", Nombre minimum d'arg à rentrer, nombre d'arg  possible, function},
  14            Exemple : 
  15            
  16            La commande "RA sens:valeur", est rentré comme suit : "RA D:90"
  17            
  18            Le cahier des Charges spécifie qu'on peut le sens de la rotation donné par l'arg sens peut
  19            ne pas être rentré. On a donc que l'arg 'valeur' obligatoire à rentrer.
  20            Donc min_arg_size = 1
  21            Les arg possibles sont D ou G et une valeur. On a donc au maximum 2 arg à rentrer.
  22            Donc max_arg_size = 2
  23            Les noms d'arg possible sont D, G, donc args_label = {"D", "G"}
  24            */
  25              {"D", epreuve_cmd},
  26              {"E", default_process},
  27              {"Q", safety_break_cmd},
  28              {"TV", set_default_speed_cmd},
  29              {"A", move_forward_cmd},
  30              {"B", move_backward_cmd},
  31              {"S", move_stop_cmd},
  32              {"RD", rigth_rotation_cmd},
  33              {"RG", left_rotation_cmd},
  34              {"RC", complete_rotation_cmd},
  35              {"RA", angle_rotation_cmd},
  36              {"G", default_process},
  37              {"ASS", default_process},
  38              {"MI", default_process},
  39              {"ME", default_process},
  40              {"IPO", default_process},
  41              {"POS", default_process},
  42              {"MOU", default_process},
  43              {"MOB", default_process},
  44              {"MOS", default_process},
  45              {"SD", default_process},
  46              {"L", default_process},
  47              {"LS", default_process},
  48              {"CS", default_process},
  49              {"PPH", default_process},
  50              {"SPH", default_process},
  51              {"AUX", default_process}
  52          };
  53          
  54          /*
C51 COMPILER V9.55   COMMANDS_PARSER                                                       03/11/2019 11:47:55 PAGE 2   

  55              FULL STATE MACHINE
  56          
  57              Liste des Etats de la machines d'état du Parser associés à leur fonction
  58          */
  59          const FSM_PROCESS full_state_machine[3] = {
  60              {WAIT, &wait},
  61              {GET_COMMAND, &get_command},
  62              {SEND_COMMAND, &wait}
  63          };
  64          
  65          /* Etat courant de la machine d'Etat */
  66          COMMANDS_PARSER_STATE current_state = WAIT;
  67          
  68          /* Buffer principal dans lesquel est stocké tout caractère reçu sur la liaison UART du µP */
  69          byte raw_data[COMMAND_BUFFER_SIZE];
  70          
  71          /* Pointer permettant de parcourir le Buffer Principal */
  72          byte buffer_index = 0;
  73          
  74          /*
  75          #############################################################################
  76                  Pour µP 8051F020
  77          #############################################################################
  78          */
  79          
  80          /**
  81            8051 µP :
  82            Initialize devices for commands_parser : UART0 and Timer 2
  83          **/
  84          byte init_parser()
  85          {
  86   1        
  87   1        /****** INIT UART0 *****/
  88   1        SM00 = 0;
  89   1        SM10 = 1;
  90   1        REN0 = 1;   
  91   1          
  92   1        /****** INIT PIN *****/
  93   1      
  94   1        // Enable Crossbar
  95   1        XBR2 = 0x40;
  96   1        // Init UART0 on Crossbar
  97   1        XBR0 = 0x04;
  98   1        // Push Pull mode
  99   1        P0MDOUT = 0xFF;
 100   1        
 101   1        /****** INIT TIMER ******/
 102   1        CKCON = 0x00; // Set CLK divider to 12 for timer 0 and 2
 103   1        
 104   1        
 105   1        // Réglage timer 2
 106   1        T2CON = 0x0D; // Capture Mode & Counter Mode & Enable & External Trig enable
 107   1        RCLK0 = 1;
 108   1        TCLK0 = 1;
 109   1        RCAP2L = 0xDC;
 110   1        RCAP2H = 0xFF;
 111   1        TR2 = 1;
 112   1        
 113   1        return 0;
 114   1      }
 115          
 116          void USART_receive(byte* read_byte)
C51 COMPILER V9.55   COMMANDS_PARSER                                                       03/11/2019 11:47:55 PAGE 3   

 117          {
 118   1        if(RI0 == 1)
 119   1        {
 120   2          *read_byte = SBUF0;
 121   2          RI0 = 0;
 122   2        }else{
 123   2          *read_byte = '*';
 124   2        }
 125   1      }
 126          
 127          void USART_send(byte ch)
 128          {
 129   1        SBUF0 = ch;
 130   1        while(TI0 == 0){}
 131   1        TI0 = 0;
 132   1      }
 133          
 134          
 135          
 136          /*
 137          #############################################################################
 138                  Core Code of commands_parser.c
 139          #############################################################################
 140          */
 141          
 142          void USART_print(char* str)
 143          {
 144   1        byte i = 0;
 145   1        for(i = 0 ; i < strlen(str); i++)
 146   1        {
 147   2          USART_send(*(str+i));
 148   2        }
 149   1      }
 150          
 151          
 152          //const FSM_PROCESS* cmd_parser_next_state()
 153          void cmd_parser_process(PARSER_RESULT* result)
 154          {
 155   1        //return &full_state_machine[current_state];
 156   1        /*
 157   1          En utilisant un pointer de function, un problème en mémoire apparait
 158   1          et le programme ne fonctionne plus comme prévu...
 159   1          Il semblerait que lorsqu'on arrive à l'appelle de wait par le biais
 160   1          de son ptr créer le problème. A ce moment, on vient écrire à l'adresse 0x000114
 161   1          de "result" la valeur du ptr de result...
 162   1        */
 163   1        //(full_state_machine[current_state]).state_process(result);
 164   1        
 165   1        /*
 166   1          Sans passer par les pointer de fonctions, plus de problème ...
 167   1        */
 168   1        switch(current_state)
 169   1        {
 170   2          case WAIT:
 171   2            wait(result);
 172   2            break;
 173   2          case GET_COMMAND:
 174   2            get_command(result);
 175   2            break;
 176   2          default:
 177   2            wait(result);
 178   2          break;
C51 COMPILER V9.55   COMMANDS_PARSER                                                       03/11/2019 11:47:55 PAGE 4   

 179   2          
 180   2        }
 181   1        //wait(result);
 182   1      }
 183          
 184          void wait(PARSER_RESULT* parser_result)
 185          {
 186   1        byte read_byte = '*';
 187   1      
 188   1        // Scrutation sur l'UART0
 189   1        USART_receive(&read_byte);
 190   1      
 191   1        // Si on lit un caractère
 192   1        if(read_byte != '*'){
 193   2            if(read_byte == STOP_BYTE)
 194   2            {
 195   3              // On passe à l'Etat 'Get Command' après avoir terminé de préparer le Buffer
 196   3              //USART_print("\nCommand Mode !\n");
 197   3              raw_data[buffer_index] = read_byte;
 198   3              buffer_index++;
 199   3              // Tjrs ajouter un '\0' à la fin du buffer, sinon strlen ne marche pas...
 200   3              raw_data[buffer_index] = '\0';
 201   3              current_state = GET_COMMAND;
 202   3            }else{
 203   3              USART_send(read_byte);
 204   3              raw_data[buffer_index] = read_byte;
 205   3              buffer_index++;
 206   3            }
 207   2        }
 208   1      }
*** WARNING C280 IN LINE 184 OF src\commands_parser.c: 'parser_result': unreferenced local variable
 209          
 210          
 211          void get_command(PARSER_RESULT* parser_result)
 212          {
 213   1          // On analyse le buffer brute
 214   1          if (!parse(parser_result))
 215   1          {
 216   2            //USART_print("Error decoding cmd !");
 217   2            error_cmd_flag();
 218   2          }else{
 219   2            valid_cmd_flag();
 220   2          }
 221   1          
 222   1          // Clear le buffer pour la prochaine lecture
 223   1          memset(raw_data, 0, strlen(raw_data));
 224   1          buffer_index = 0;
 225   1          // On revient dans l'Etat où on scrute l'UART0
 226   1          current_state = WAIT;
 227   1      }
 228          
 229          
 230          byte parse(PARSER_RESULT* parser_result)
 231          {
 232   1        // Tableau dans lequel on va ranger : [Nom_Commande][Param1][Valeur1][...]
 233   1        char commands_data[MAX_COMMAND_WORD][ARGS_BUFFER_SIZE] = {'H'};
 234   1        // Pointers pour parcourir les différents buffers
 235   1        byte data_index = 0, ptr = 0, reading_ptr = 0;
 236   1        byte ret = 0;
 237   1        char c = 0, i = 0;
 238   1        char run = 1;
 239   1        /*char** ptra = 0;
C51 COMPILER V9.55   COMMANDS_PARSER                                                       03/11/2019 11:47:55 PAGE 5   

 240   1        char** ptrb = 0;
 241   1        char* t = 0;
 242   1        char* v = 0;*/
 243   1      
 244   1        CMD_PACKET cmd_packet;
 245   1      
 246   1        // Dispatches commands and arguments in commands_data buffer
 247   1        while(run)
 248   1        {
 249   2            c = *(raw_data + reading_ptr);
 250   2            /*t = (commands_data + data_index);
 251   2            v = commands_data[data_index];*/
 252   2            switch (c)
 253   2            {
 254   3              case COMMAND_SEPARATOR:
 255   3                *( *(commands_data + data_index) + ptr ) = '\0';
 256   3                //USART_print(commands_data[data_index]);
 257   3                data_index++;
 258   3                ptr = 0;
 259   3                break;
 260   3      
 261   3              case ARG_VALUE_SEPARATOR:
 262   3                *( *(commands_data + data_index) + ptr ) = '\0';
 263   3                //USART_print(commands_data[data_index]);
 264   3                data_index++;
 265   3                ptr = 0;
 266   3                break;
 267   3      
 268   3                // Fin de l'analyse
 269   3              case STOP_BYTE:
 270   3                *( *(commands_data + data_index) + ptr ) = '\0';
 271   3                //USART_print(commands_data[data_index]);
 272   3                run = 0;
 273   3                break;
 274   3      
 275   3              default:
 276   3                *( *(commands_data + data_index) + ptr ) = c;
 277   3                ptr++;
 278   3            }
 279   2      
 280   2            reading_ptr++;
 281   2        }
 282   1        
 283   1        // Préparation du packet
 284   1        
 285   1        cmd_packet.commands_data = &commands_data;
*** WARNING C182 IN LINE 285 OF src\commands_parser.c: pointer to different objects
 286   1        cmd_packet.cmd_size = data_index;
 287   1        cmd_packet.commands = &(parser_result->commands);
 288   1      
 289   1        
 290   1        // Looking for the command in the Command Dictionnary
 291   1        for(i = 0 ; i < NUMBER_OF_COMMAND; i++)
 292   1        {
 293   2          if(strcmp(*(commands_data), dispatch_table[i].name) == 0)
 294   2          {
 295   3            // On test la validité des args entré par l'user
 296   3            if(dispatch_table[i].process(&cmd_packet) != 0)
 297   3            {
 298   4              ret = 1;
 299   4            }else{
 300   4              USART_print("Cmd Erreur !!!!");
C51 COMPILER V9.55   COMMANDS_PARSER                                                       03/11/2019 11:47:55 PAGE 6   

 301   4              ret = 0;
 302   4            }
 303   3            /*
 304   3            USART_print("Find Command : ");
 305   3            USART_print(dispatch_table[i].name);
 306   3            USART_send('\n');
 307   3            */
 308   3            
 309   3          }
 310   2        }
 311   1      
 312   1        clear_buffer(commands_data, data_index+1);
*** WARNING C182 IN LINE 312 OF src\commands_parser.c: pointer to different objects
 313   1        clear_buffer(cmd_packet.commands_data, data_index+1);
 314   1      
 315   1        return ret;
 316   1      }
 317          
 318          void valid_cmd_flag()
 319          {
 320   1        USART_send(0x0D);
 321   1        USART_send(0x0A);
 322   1        USART_send(COMMAND_CONFIRM_BYTE);
 323   1      }
 324          
 325          void error_cmd_flag()
 326          {
 327   1        USART_send(0x0D);
 328   1        USART_send(0x0A);
 329   1        USART_send(COMMAND_ERROR_BYTE); 
 330   1      }
 331          
 332          void clear_buffer(char** data_buffer, byte buffer_size)
 333          {
 334   1        byte i = 0;
 335   1        for(i = 0 ; i <= buffer_size; ++i)
 336   1        {
 337   2          memset(*(data_buffer + i), 0 , ARGS_BUFFER_SIZE);
 338   2        }
 339   1        
 340   1      }
 341          
 342          void read_command(PARSER_RESULT* parser_result)
 343          {
 344   1          // Nothing TODO
 345   1      }
*** WARNING C280 IN LINE 342 OF src\commands_parser.c: 'parser_result': unreferenced local variable
 346          
 347          /*
 348          char encode_data()
 349          {
 350          
 351          
 352          }*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    901    ----
   CONSTANT SIZE    =    194    ----
   XDATA SIZE       =    276     131
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.55   COMMANDS_PARSER                                                       03/11/2019 11:47:55 PAGE 7   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
